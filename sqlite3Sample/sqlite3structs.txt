typedef struct ShellText ShellText ;
struct ShellText { 
 char *z ; 
 int n ; 
 int nAlloc ; 
 } ;
typedef struct SHA3Context SHA3Context ;
struct SHA3Context { 
 union { u64 s[25] ; 
 unsigned char x[1600] ; 
 } u ; 
 unsigned nRate ; 
 unsigned nLoaded ; 
 unsigned ixMask ; 
 } ;
typedef struct SavedModeInfo SavedModeInfo ;
struct SavedModeInfo { 
 int valid ; 
 int mode ; 
 int showHeader ; 
 int colWidth[100] ; 
 } ;
typedef struct ShellState ShellState ;
struct ShellState { 
 sqlite3 *db ; 
 int autoExplain ; 
 int autoEQP ; 
 int statsOn ; 
 int scanstatsOn ; 
 int outCount ; 
 int cnt ; 
 FILE *out ; 
 FILE *traceOut ; 
 int nErr ; 
 int mode ; 
 int cMode ; 
 int normalMode ; 
 int writableSchema ; 
 int showHeader ; 
 int nCheck ; 
 unsigned shellFlgs ; 
 char *zDestTable ; 
 char zTestcase[30] ; 
 char colSeparator[20] ; 
 char rowSeparator[20] ; 
 int colWidth[100] ; 
 int actualWidth[100] ; 
 char nullValue[20] ; 
 char outfile[FILENAME_MAX] ; 
 const char *zDbFilename ; 
 char *zFreeOnClose ; 
 const char *zVfs ; 
 sqlite3_stmt *pStmt ; 
 FILE *pLog ; 
 int *aiIndent ; 
 int nIndent ; 
 int iIndent ; 
 } ;
typedef struct ImportCtx ImportCtx ;
struct ImportCtx { 
 const char *zFile ; 
 FILE *in ; 
 char *z ; 
 int n ; 
 int nAlloc ; 
 int nLine ; 
 int cTerm ; 
 int cColSep ; 
 int cRowSep ; 
 } ;
typedef struct sqlite3 sqlite3 ;
typedef struct sqlite3_file sqlite3_file ;
struct sqlite3_file { 
 const struct sqlite3_io_methods *pMethods ; 
 } ;
typedef struct sqlite3_io_methods sqlite3_io_methods ;
struct sqlite3_io_methods { 
 int iVersion ; 
 int (*xClose)(sqlite3_file*) ; 
 int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst) ; 
 int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst) ; 
 int (*xTruncate)(sqlite3_file*, sqlite3_int64 size) ; 
 int (*xSync)(sqlite3_file*, int flags) ; 
 int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize) ; 
 int (*xLock)(sqlite3_file*, int) ; 
 int (*xUnlock)(sqlite3_file*, int) ; 
 int (*xCheckReservedLock)(sqlite3_file*, int *pResOut) ; 
 int (*xFileControl)(sqlite3_file*, int op, void *pArg) ; 
 int (*xSectorSize)(sqlite3_file*) ; 
 int (*xDeviceCharacteristics)(sqlite3_file*) ; 
 int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**) ; 
 int (*xShmLock)(sqlite3_file*, int offset, int n, int flags) ; 
 void (*xShmBarrier)(sqlite3_file*) ; 
 int (*xShmUnmap)(sqlite3_file*, int deleteFlag) ; 
 int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp) ; 
 int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p) ; 
 } ;
typedef struct sqlite3_mutex sqlite3_mutex ;
typedef struct sqlite3_api_routines sqlite3_api_routines ;
typedef struct sqlite3_vfs sqlite3_vfs ;
struct sqlite3_vfs { 
 int iVersion ; 
 int szOsFile ; 
 int mxPathname ; 
 sqlite3_vfs *pNext ; 
 const char *zName ; 
 void *pAppData ; 
 int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*, int flags, int *pOutFlags) ; 
 int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir) ; 
 int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut) ; 
 int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut) ; 
 void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename) ; 
 void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg) ; 
 void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void) ; 
 void (*xDlClose)(sqlite3_vfs*, void*) ; 
 int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut) ; 
 int (*xSleep)(sqlite3_vfs*, int microseconds) ; 
 int (*xCurrentTime)(sqlite3_vfs*, double*) ; 
 int (*xGetLastError)(sqlite3_vfs*, int, char *) ; 
 int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*) ; 
 int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr) ; 
 sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName) ; 
 const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName) ; 
 } ;
typedef struct sqlite3_mem_methods sqlite3_mem_methods ;
struct sqlite3_mem_methods { 
 void *(*xMalloc)(int) ; 
 void (*xFree)(void*) ; 
 void *(*xRealloc)(void*,int) ; 
 int (*xSize)(void*) ; 
 int (*xRoundup)(int) ; 
 int (*xInit)(void*) ; 
 void (*xShutdown)(void*) ; 
 void *pAppData ; 
 } ;
typedef struct sqlite3_stmt sqlite3_stmt ;
typedef struct Mem sqlite3_value ;
typedef struct sqlite3_context sqlite3_context ;
typedef struct sqlite3_vtab sqlite3_vtab ;
typedef struct sqlite3_index_info sqlite3_index_info ;
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor ;
typedef struct sqlite3_module sqlite3_module ;
struct sqlite3_module { 
 int iVersion ; 
 int (*xCreate)(sqlite3*, void *pAux, int argc, const char *const*argv, sqlite3_vtab **ppVTab, char**) ; 
 int (*xConnect)(sqlite3*, void *pAux, int argc, const char *const*argv, sqlite3_vtab **ppVTab, char**) ; 
 int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*) ; 
 int (*xDisconnect)(sqlite3_vtab *pVTab) ; 
 int (*xDestroy)(sqlite3_vtab *pVTab) ; 
 int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor) ; 
 int (*xClose)(sqlite3_vtab_cursor*) ; 
 int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr, int argc, sqlite3_value **argv) ; 
 int (*xNext)(sqlite3_vtab_cursor*) ; 
 int (*xEof)(sqlite3_vtab_cursor*) ; 
 int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int) ; 
 int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid) ; 
 int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *) ; 
 int (*xBegin)(sqlite3_vtab *pVTab) ; 
 int (*xSync)(sqlite3_vtab *pVTab) ; 
 int (*xCommit)(sqlite3_vtab *pVTab) ; 
 int (*xRollback)(sqlite3_vtab *pVTab) ; 
 int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName, void (**pxFunc)(sqlite3_context*,int,sqlite3_value**), void **ppArg) ; 
 int (*xRename)(sqlite3_vtab *pVtab, const char *zNew) ; 
 int (*xSavepoint)(sqlite3_vtab *pVTab, int) ; 
 int (*xRelease)(sqlite3_vtab *pVTab, int) ; 
 int (*xRollbackTo)(sqlite3_vtab *pVTab, int) ; 
 } ;
struct sqlite3_index_info { 
 int nConstraint ; 
 struct sqlite3_index_constraint { int iColumn ; 
 unsigned char op ; 
 unsigned char usable ; 
 int iTermOffset ; 
 } *aConstraint ; 
 int nOrderBy ; 
 struct sqlite3_index_orderby { int iColumn ; 
 unsigned char desc ; 
 } *aOrderBy ; 
 struct sqlite3_index_constraint_usage { int argvIndex ; 
 unsigned char omit ; 
 } *aConstraintUsage ; 
 int idxNum ; 
 char *idxStr ; 
 int needToFreeIdxStr ; 
 int orderByConsumed ; 
 double estimatedCost ; 
 sqlite3_int64 estimatedRows ; 
 int idxFlags ; 
 sqlite3_uint64 colUsed ; 
 } ;
struct sqlite3_vtab { 
 const sqlite3_module *pModule ; 
 int nRef ; 
 char *zErrMsg ; 
 } ;
struct sqlite3_vtab_cursor { 
 sqlite3_vtab *pVtab ; 
 } ;
typedef struct sqlite3_blob sqlite3_blob ;
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods ;
struct sqlite3_mutex_methods { 
 int (*xMutexInit)(void) ; 
 int (*xMutexEnd)(void) ; 
 sqlite3_mutex *(*xMutexAlloc)(int) ; 
 void (*xMutexFree)(sqlite3_mutex *) ; 
 void (*xMutexEnter)(sqlite3_mutex *) ; 
 int (*xMutexTry)(sqlite3_mutex *) ; 
 void (*xMutexLeave)(sqlite3_mutex *) ; 
 int (*xMutexHeld)(sqlite3_mutex *) ; 
 int (*xMutexNotheld)(sqlite3_mutex *) ; 
 } ;
typedef struct sqlite3_pcache sqlite3_pcache ;
typedef struct sqlite3_pcache_page sqlite3_pcache_page ;
struct sqlite3_pcache_page { 
 void *pBuf ; 
 void *pExtra ; 
 } ;
typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2 ;
struct sqlite3_pcache_methods2 { 
 int iVersion ; 
 void *pArg ; 
 int (*xInit)(void*) ; 
 void (*xShutdown)(void*) ; 
 sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable) ; 
 void (*xCachesize)(sqlite3_pcache*, int nCachesize) ; 
 int (*xPagecount)(sqlite3_pcache*) ; 
 sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag) ; 
 void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard) ; 
 void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, unsigned oldKey, unsigned newKey) ; 
 void (*xTruncate)(sqlite3_pcache*, unsigned iLimit) ; 
 void (*xDestroy)(sqlite3_pcache*) ; 
 void (*xShrink)(sqlite3_pcache*) ; 
 } ;
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods ;
struct sqlite3_pcache_methods { 
 void *pArg ; 
 int (*xInit)(void*) ; 
 void (*xShutdown)(void*) ; 
 sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable) ; 
 void (*xCachesize)(sqlite3_pcache*, int nCachesize) ; 
 int (*xPagecount)(sqlite3_pcache*) ; 
 void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag) ; 
 void (*xUnpin)(sqlite3_pcache*, void*, int discard) ; 
 void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey) ; 
 void (*xTruncate)(sqlite3_pcache*, unsigned iLimit) ; 
 void (*xDestroy)(sqlite3_pcache*) ; 
 } ;
typedef struct sqlite3_backup sqlite3_backup ;
typedef struct sqlite3_snapshot { 
 unsigned char hidden[48] ; 
 } sqlite3_snapshot ;
typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry ;
typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info ;
struct sqlite3_rtree_geometry { 
 void *pContext ; 
 int nParam ; 
 sqlite3_rtree_dbl *aParam ; 
 void *pUser ; 
 void (*xDelUser)(void *) ; 
 } ;
struct sqlite3_rtree_query_info { 
 void *pContext ; 
 int nParam ; 
 sqlite3_rtree_dbl *aParam ; 
 void *pUser ; 
 void (*xDelUser)(void*) ; 
 sqlite3_rtree_dbl *aCoord ; 
 unsigned int *anQueue ; 
 int nCoord ; 
 int iLevel ; 
 int mxLevel ; 
 sqlite3_int64 iRowid ; 
 sqlite3_rtree_dbl rParentScore ; 
 int eParentWithin ; 
 int eWithin ; 
 sqlite3_rtree_dbl rScore ; 
 sqlite3_value **apSqlParam ; 
 } ;
typedef struct sqlite3_session sqlite3_session ;
typedef struct sqlite3_changeset_iter sqlite3_changeset_iter ;
typedef struct sqlite3_changegroup sqlite3_changegroup ;
typedef struct Fts5ExtensionApi Fts5ExtensionApi ;
typedef struct Fts5Context Fts5Context ;
typedef struct Fts5PhraseIter Fts5PhraseIter ;
struct Fts5PhraseIter { 
 const unsigned char *a ; 
 const unsigned char *b ; 
 } ;
struct Fts5ExtensionApi { 
 int iVersion ; 
 void *(*xUserData)(Fts5Context*) ; 
 int (*xColumnCount)(Fts5Context*) ; 
 int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow) ; 
 int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken) ; 
 int (*xTokenize)(Fts5Context*, const char *pText, int nText, void *pCtx, int (*xToken)(void*, int, const char*, int, int, int) ) ; 
 int (*xPhraseCount)(Fts5Context*) ; 
 int (*xPhraseSize)(Fts5Context*, int iPhrase) ; 
 int (*xInstCount)(Fts5Context*, int *pnInst) ; 
 int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff) ; 
 sqlite3_int64 (*xRowid)(Fts5Context*) ; 
 int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn) ; 
 int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken) ; 
 int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData, int(*)(const Fts5ExtensionApi*,Fts5Context*,void*) ) ; 
 int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*)) ; 
 void *(*xGetAuxdata)(Fts5Context*, int bClear) ; 
 int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*) ; 
 void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff) ; 
 int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*) ; 
 void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol) ; 
 } ;
typedef struct Fts5Tokenizer Fts5Tokenizer ;
typedef struct fts5_tokenizer fts5_tokenizer ;
struct fts5_tokenizer { 
 int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut) ; 
 void (*xDelete)(Fts5Tokenizer*) ; 
 int (*xTokenize)(Fts5Tokenizer*, void *pCtx, int flags, const char *pText, int nText, int (*xToken)( void *pCtx, int tflags, const char *pToken, int nToken, int iStart, int iEnd ) ) ; 
 } ;
typedef struct fts5_api fts5_api ;
struct fts5_api { 
 int iVersion ; 
 int (*xCreateTokenizer)( fts5_api *pApi, const char *zName, void *pContext, fts5_tokenizer *pTokenizer, void (*xDestroy)(void*) ) ; 
 int (*xFindTokenizer)( fts5_api *pApi, const char *zName, void **ppContext, fts5_tokenizer *pTokenizer ) ; 
 int (*xCreateFunction)( fts5_api *pApi, const char *zName, void *pContext, fts5_extension_function xFunction, void (*xDestroy)(void*) ) ; 
 } ;
typedef struct Hash Hash ;
typedef struct HashElem HashElem ;
struct Hash { 
 unsigned int htsize ; 
 unsigned int count ; 
 HashElem *first ; 
 struct _ht { int count ; 
 HashElem *chain ; 
 } *ht ; 
 } ;
struct HashElem { 
 HashElem *next, *prev ; 
 void *data ; 
 const char *pKey ; 
 } ;
typedef struct BusyHandler BusyHandler ;
struct BusyHandler { 
 int (*xFunc)(void *,int) ; 
 void *pArg ; 
 int nBusy ; 
 } ;
typedef struct AggInfo AggInfo ;
typedef struct AuthContext AuthContext ;
typedef struct AutoincInfo AutoincInfo ;
typedef struct Bitvec Bitvec ;
typedef struct CollSeq CollSeq ;
typedef struct Column Column ;
typedef struct Db Db ;
typedef struct Schema Schema ;
typedef struct Expr Expr ;
typedef struct ExprList ExprList ;
typedef struct ExprSpan ExprSpan ;
typedef struct FKey FKey ;
typedef struct FuncDestructor FuncDestructor ;
typedef struct FuncDef FuncDef ;
typedef struct FuncDefHash FuncDefHash ;
typedef struct IdList IdList ;
typedef struct Index Index ;
typedef struct IndexSample IndexSample ;
typedef struct KeyClass KeyClass ;
typedef struct KeyInfo KeyInfo ;
typedef struct Lookaside Lookaside ;
typedef struct LookasideSlot LookasideSlot ;
typedef struct Module Module ;
typedef struct NameContext NameContext ;
typedef struct Parse Parse ;
typedef struct PreUpdate PreUpdate ;
typedef struct PrintfArguments PrintfArguments ;
typedef struct RowSet RowSet ;
typedef struct Savepoint Savepoint ;
typedef struct Select Select ;
typedef struct SQLiteThread SQLiteThread ;
typedef struct SelectDest SelectDest ;
typedef struct SrcList SrcList ;
typedef struct StrAccum StrAccum ;
typedef struct Table Table ;
typedef struct TableLock TableLock ;
typedef struct Token Token ;
typedef struct TreeView TreeView ;
typedef struct Trigger Trigger ;
typedef struct TriggerPrg TriggerPrg ;
typedef struct TriggerStep TriggerStep ;
typedef struct UnpackedRecord UnpackedRecord ;
typedef struct VTable VTable ;
typedef struct VtabCtx VtabCtx ;
typedef struct Walker Walker ;
typedef struct WhereInfo WhereInfo ;
typedef struct With With ;
typedef struct Btree Btree ;
typedef struct BtCursor BtCursor ;
typedef struct BtShared BtShared ;
typedef struct BtreePayload BtreePayload ;
struct BtreePayload { 
 const void *pKey ; 
 sqlite3_int64 nKey ; 
 const void *pData ; 
 struct Mem *aMem ; 
 u16 nMem ; 
 int nData ; 
 int nZero ; 
 } ;
typedef struct Vdbe Vdbe ;
typedef struct Mem Mem ;
typedef struct SubProgram SubProgram ;
struct VdbeOp { 
 u8 opcode ; 
 signed char p4type ; 
 u16 p5 ; 
 int p1 ; 
 int p2 ; 
 int p3 ; 
 union p4union { int i ; 
 void *p ; 
 char *z ; 
 i64 *pI64 ; 
 double *pReal ; 
 FuncDef *pFunc ; 
 sqlite3_context *pCtx ; 
 CollSeq *pColl ; 
 Mem *pMem ; 
 VTable *pVtab ; 
 KeyInfo *pKeyInfo ; 
 int *ai ; 
 SubProgram *pProgram ; 
 Table *pTab ; 
 int (*xAdvance)(BtCursor *, int *) ; 
 } p4 ; 
 char *zComment ; 
 } ;
typedef struct VdbeOp VdbeOp ;
struct SubProgram { 
 VdbeOp *aOp ; 
 int nOp ; 
 int nMem ; 
 int nCsr ; 
 u8 *aOnce ; 
 void *token ; 
 SubProgram *pNext ; 
 } ;
struct VdbeOpList { 
 u8 opcode ; 
 signed char p1 ; 
 signed char p2 ; 
 signed char p3 ; 
 } ;
typedef struct VdbeOpList VdbeOpList ;
typedef struct Pager Pager ;
typedef struct PgHdr DbPage ;
typedef struct PgHdr PgHdr ;
typedef struct PCache PCache ;
struct PgHdr { 
 sqlite3_pcache_page *pPage ; 
 void *pData ; 
 void *pExtra ; 
 PgHdr *pDirty ; 
 Pager *pPager ; 
 Pgno pgno ; 
 u16 flags ; 
 i16 nRef ; 
 PCache *pCache ; 
 PgHdr *pDirtyNext ; 
 PgHdr *pDirtyPrev ; 
 } ;
struct Db { 
 char *zDbSName ; 
 Btree *pBt ; 
 u8 safety_level ; 
 u8 bSyncSet ; 
 Schema *pSchema ; 
 } ;
struct Schema { 
 int schema_cookie ; 
 int iGeneration ; 
 Hash tblHash ; 
 Hash idxHash ; 
 Hash trigHash ; 
 Hash fkeyHash ; 
 Table *pSeqTab ; 
 u8 file_format ; 
 u8 enc ; 
 u16 schemaFlags ; 
 int cache_size ; 
 } ;
struct Lookaside { 
 u32 bDisable ; 
 u16 sz ; 
 u8 bMalloced ; 
 int nOut ; 
 int mxOut ; 
 int anStat[3] ; 
 LookasideSlot *pFree ; 
 void *pStart ; 
 void *pEnd ; 
 } ;
struct LookasideSlot { 
 LookasideSlot *pNext ; 
 } ;
struct FuncDefHash { 
 FuncDef *a[SQLITE_FUNC_HASH_SZ] ; 
 } ;
struct sqlite3 { 
 sqlite3_vfs *pVfs ; 
 struct Vdbe *pVdbe ; 
 CollSeq *pDfltColl ; 
 sqlite3_mutex *mutex ; 
 Db *aDb ; 
 int nDb ; 
 int flags ; 
 i64 lastRowid ; 
 i64 szMmap ; 
 unsigned int openFlags ; 
 int errCode ; 
 int errMask ; 
 int iSysErrno ; 
 u16 dbOptFlags ; 
 u8 enc ; 
 u8 autoCommit ; 
 u8 temp_store ; 
 u8 mallocFailed ; 
 u8 bBenignMalloc ; 
 u8 dfltLockMode ; 
 signed char nextAutovac ; 
 u8 suppressErr ; 
 u8 vtabOnConflict ; 
 u8 isTransactionSavepoint ; 
 u8 mTrace ; 
 u8 skipBtreeMutex ; 
 u8 nSqlExec ; 
 int nextPagesize ; 
 u32 magic ; 
 int nChange ; 
 int nTotalChange ; 
 int aLimit[SQLITE_N_LIMIT] ; 
 int nMaxSorterMmap ; 
 struct sqlite3InitInfo { int newTnum ; 
 u8 iDb ; 
 u8 busy ; 
 u8 orphanTrigger ; 
 u8 imposterTable ; 
 } init ; 
 int nVdbeActive ; 
 int nVdbeRead ; 
 int nVdbeWrite ; 
 int nVdbeExec ; 
 int nVDestroy ; 
 int nExtension ; 
 void **aExtension ; 
 int (*xTrace)(u32,void*,void*,void*) ; 
 void *pTraceArg ; 
 void (*xProfile)(void*,const char*,u64) ; 
 void *pProfileArg ; 
 void *pCommitArg ; 
 int (*xCommitCallback)(void*) ; 
 void *pRollbackArg ; 
 void (*xRollbackCallback)(void*) ; 
 void *pUpdateArg ; 
 void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64) ; 
 int (*xWalCallback)(void *, sqlite3 *, const char *, int) ; 
 void *pWalArg ; 
 void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*) ; 
 void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*) ; 
 void *pCollNeededArg ; 
 sqlite3_value *pErr ; 
 union { volatile int isInterrupted ; 
 double notUsed1 ; 
 } u1 ; 
 Lookaside lookaside ; 
 sqlite3_xauth xAuth ; 
 void *pAuthArg ; 
 int (*xProgress)(void *) ; 
 void *pProgressArg ; 
 unsigned nProgressOps ; 
 int nVTrans ; 
 Hash aModule ; 
 VtabCtx *pVtabCtx ; 
 VTable **aVTrans ; 
 VTable *pDisconnect ; 
 Hash aFunc ; 
 Hash aCollSeq ; 
 BusyHandler busyHandler ; 
 Db aDbStatic[2] ; 
 Savepoint *pSavepoint ; 
 int busyTimeout ; 
 int nSavepoint ; 
 int nStatement ; 
 i64 nDeferredCons ; 
 i64 nDeferredImmCons ; 
 int *pnBytesFreed ; 
 } ;
struct FuncDef { 
 i8 nArg ; 
 u16 funcFlags ; 
 void *pUserData ; 
 FuncDef *pNext ; 
 void (*xSFunc)(sqlite3_context*,int,sqlite3_value**) ; 
 void (*xFinalize)(sqlite3_context*) ; 
 const char *zName ; 
 union { FuncDef *pHash ; 
 FuncDestructor *pDestructor ; 
 } u ; 
 } ;
struct FuncDestructor { 
 int nRef ; 
 void (*xDestroy)(void *) ; 
 void *pUserData ; 
 } ;
struct Savepoint { 
 char *zName ; 
 i64 nDeferredCons ; 
 i64 nDeferredImmCons ; 
 Savepoint *pNext ; 
 } ;
struct Module { 
 const sqlite3_module *pModule ; 
 const char *zName ; 
 void *pAux ; 
 void (*xDestroy)(void *) ; 
 Table *pEpoTab ; 
 } ;
struct Column { 
 char *zName ; 
 Expr *pDflt ; 
 char *zColl ; 
 u8 notNull ; 
 char affinity ; 
 u8 szEst ; 
 u8 colFlags ; 
 } ;
struct CollSeq { 
 char *zName ; 
 u8 enc ; 
 void *pUser ; 
 int (*xCmp)(void*,int, const void*, int, const void*) ; 
 void (*xDel)(void*) ; 
 } ;
struct VTable { 
 sqlite3 *db ; 
 Module *pMod ; 
 sqlite3_vtab *pVtab ; 
 int nRef ; 
 u8 bConstraint ; 
 int iSavepoint ; 
 VTable *pNext ; 
 } ;
struct Table { 
 char *zName ; 
 Column *aCol ; 
 Index *pIndex ; 
 Select *pSelect ; 
 FKey *pFKey ; 
 char *zColAff ; 
 ExprList *pCheck ; 
 int tnum ; 
 u32 nTabRef ; 
 u32 tabFlags ; 
 i16 iPKey ; 
 i16 nCol ; 
 LogEst nRowLogEst ; 
 LogEst szTabRow ; 
 u8 keyConf ; 
 int addColOffset ; 
 int nModuleArg ; 
 char **azModuleArg ; 
 VTable *pVTable ; 
 Trigger *pTrigger ; 
 Schema *pSchema ; 
 Table *pNextZombie ; 
 } ;
struct FKey { 
 Table *pFrom ; 
 FKey *pNextFrom ; 
 char *zTo ; 
 FKey *pNextTo ; 
 FKey *pPrevTo ; 
 int nCol ; 
 u8 isDeferred ; 
 u8 aAction[2] ; 
 Trigger *apTrigger[2] ; 
 struct sColMap { int iFrom ; 
 char *zCol ; 
 } aCol[1] ; 
 } ;
struct KeyInfo { 
 u32 nRef ; 
 u8 enc ; 
 u16 nField ; 
 u16 nXField ; 
 sqlite3 *db ; 
 u8 *aSortOrder ; 
 CollSeq *aColl[1] ; 
 } ;
struct UnpackedRecord { 
 KeyInfo *pKeyInfo ; 
 Mem *aMem ; 
 u16 nField ; 
 i8 default_rc ; 
 u8 errCode ; 
 i8 r1 ; 
 i8 r2 ; 
 u8 eqSeen ; 
 } ;
struct Index { 
 char *zName ; 
 i16 *aiColumn ; 
 LogEst *aiRowLogEst ; 
 Table *pTable ; 
 char *zColAff ; 
 Index *pNext ; 
 Schema *pSchema ; 
 u8 *aSortOrder ; 
 const char **azColl ; 
 Expr *pPartIdxWhere ; 
 ExprList *aColExpr ; 
 int tnum ; 
 LogEst szIdxRow ; 
 u16 nKeyCol ; 
 u16 nColumn ; 
 u8 onError ; 
 unsigned idxType:2 ; 
 unsigned bUnordered:1 ; 
 unsigned uniqNotNull:1 ; 
 unsigned isResized:1 ; 
 unsigned isCovering:1 ; 
 unsigned noSkipScan:1 ; 
 unsigned hasStat1:1 ; 
 } ;
struct IndexSample { 
 void *p ; 
 int n ; 
 tRowcnt *anEq ; 
 tRowcnt *anLt ; 
 tRowcnt *anDLt ; 
 } ;
struct Token { 
 const char *z ; 
 unsigned int n ; 
 } ;
struct AggInfo { 
 u8 directMode ; 
 u8 useSortingIdx ; 
 int sortingIdx ; 
 int sortingIdxPTab ; 
 int nSortingColumn ; 
 int mnReg, mxReg ; 
 ExprList *pGroupBy ; 
 struct AggInfo_col { Table *pTab ; 
 int iTable ; 
 int iColumn ; 
 int iSorterColumn ; 
 int iMem ; 
 Expr *pExpr ; 
 } *aCol ; 
 int nColumn ; 
 int nAccumulator ; 
 struct AggInfo_func { Expr *pExpr ; 
 FuncDef *pFunc ; 
 int iMem ; 
 int iDistinct ; 
 } *aFunc ; 
 int nFunc ; 
 } ;
struct Expr { 
 u8 op ; 
 char affinity ; 
 u32 flags ; 
 union { char *zToken ; 
 int iValue ; 
 } u ; 
 Expr *pLeft ; 
 Expr *pRight ; 
 union { ExprList *pList ; 
 Select *pSelect ; 
 } x ; 
 int iTable ; 
 ynVar iColumn ; 
 i16 iAgg ; 
 i16 iRightJoinTable ; 
 u8 op2 ; 
 AggInfo *pAggInfo ; 
 Table *pTab ; 
 } ;
struct ExprList { 
 int nExpr ; 
 struct ExprList_item { Expr *pExpr ; 
 char *zName ; 
 char *zSpan ; 
 u8 sortOrder ; 
 unsigned done :1 ; 
 unsigned bSpanIsTab :1 ; 
 unsigned reusable :1 ; 
 union { struct { u16 iOrderByCol ; 
 u16 iAlias ; 
 } x ; 
 int iConstExprReg ; 
 } u ; 
 } *a ; 
 } ;
struct ExprSpan { 
 Expr *pExpr ; 
 const char *zStart ; 
 const char *zEnd ; 
 } ;
struct IdList { 
 struct IdList_item { char *zName ; 
 int idx ; 
 } *a ; 
 int nId ; 
 } ;
struct SrcList { 
 int nSrc ; 
 u32 nAlloc ; 
 struct SrcList_item { Schema *pSchema ; 
 char *zDatabase ; 
 char *zName ; 
 char *zAlias ; 
 Table *pTab ; 
 Select *pSelect ; 
 int addrFillSub ; 
 int regReturn ; 
 int regResult ; 
 struct { u8 jointype ; 
 unsigned notIndexed :1 ; 
 unsigned isIndexedBy :1 ; 
 unsigned isTabFunc :1 ; 
 unsigned isCorrelated :1 ; 
 unsigned viaCoroutine :1 ; 
 unsigned isRecursive :1 ; 
 } fg ; 
 u8 iSelectId ; 
 int iCursor ; 
 Expr *pOn ; 
 IdList *pUsing ; 
 Bitmask colUsed ; 
 union { char *zIndexedBy ; 
 ExprList *pFuncArg ; 
 } u1 ; 
 Index *pIBIndex ; 
 } a[1] ; 
 } ;
struct NameContext { 
 Parse *pParse ; 
 SrcList *pSrcList ; 
 ExprList *pEList ; 
 AggInfo *pAggInfo ; 
 NameContext *pNext ; 
 int nRef ; 
 int nErr ; 
 u16 ncFlags ; 
 } ;
struct Select { 
 ExprList *pEList ; 
 u8 op ; 
 LogEst nSelectRow ; 
 u32 selFlags ; 
 int iLimit, iOffset ; 
 int addrOpenEphm[2] ; 
 SrcList *pSrc ; 
 Expr *pWhere ; 
 ExprList *pGroupBy ; 
 Expr *pHaving ; 
 ExprList *pOrderBy ; 
 Select *pPrior ; 
 Select *pNext ; 
 Expr *pLimit ; 
 Expr *pOffset ; 
 With *pWith ; 
 } ;
struct SelectDest { 
 u8 eDest ; 
 char *zAffSdst ; 
 int iSDParm ; 
 int iSdst ; 
 int nSdst ; 
 ExprList *pOrderBy ; 
 } ;
struct AutoincInfo { 
 AutoincInfo *pNext ; 
 Table *pTab ; 
 int iDb ; 
 int regCtr ; 
 } ;
struct TriggerPrg { 
 Trigger *pTrigger ; 
 TriggerPrg *pNext ; 
 SubProgram *pProgram ; 
 int orconf ; 
 u32 aColmask[2] ; 
 } ;
struct Parse { 
 sqlite3 *db ; 
 char *zErrMsg ; 
 Vdbe *pVdbe ; 
 int rc ; 
 u8 colNamesSet ; 
 u8 checkSchema ; 
 u8 nested ; 
 u8 nTempReg ; 
 u8 isMultiWrite ; 
 u8 mayAbort ; 
 u8 hasCompound ; 
 u8 okConstFactor ; 
 u8 disableLookaside ; 
 u8 nColCache ; 
 int nRangeReg ; 
 int iRangeReg ; 
 int nErr ; 
 int nTab ; 
 int nMem ; 
 int nOpAlloc ; 
 int szOpAlloc ; 
 int ckBase ; 
 int iSelfTab ; 
 int iCacheLevel ; 
 int iCacheCnt ; 
 int nLabel ; 
 int *aLabel ; 
 ExprList *pConstExpr ; 
 Token constraintName ; 
 yDbMask writeMask ; 
 yDbMask cookieMask ; 
 int regRowid ; 
 int regRoot ; 
 int nMaxArg ; 
 int nTableLock ; 
 TableLock *aTableLock ; 
 AutoincInfo *pAinc ; 
 Parse *pToplevel ; 
 Table *pTriggerTab ; 
 int addrCrTab ; 
 u32 nQueryLoop ; 
 u32 oldmask ; 
 u32 newmask ; 
 u8 eTriggerOp ; 
 u8 eOrconf ; 
 u8 disableTriggers ; 
 struct yColCache { int iTable ; 
 i16 iColumn ; 
 u8 tempReg ; 
 int iLevel ; 
 int iReg ; 
 int lru ; 
 } aColCache[SQLITE_N_COLCACHE] ; 
 int aTempReg[8] ; 
 Token sNameToken ; 
 Token sLastToken ; 
 ynVar nVar ; 
 u8 iPkSortOrder ; 
 u8 explain ; 
 u8 declareVtab ; 
 int nVtabLock ; 
 int nHeight ; 
 int iSelectId ; 
 int iNextSelectId ; 
 VList *pVList ; 
 Vdbe *pReprepare ; 
 const char *zTail ; 
 Table *pNewTable ; 
 Trigger *pNewTrigger ; 
 const char *zAuthContext ; 
 Token sArg ; 
 Table **apVtabLock ; 
 Table *pZombieTab ; 
 TriggerPrg *pTriggerPrg ; 
 With *pWith ; 
 With *pWithToFree ; 
 } ;
struct AuthContext { 
 const char *zAuthContext ; 
 Parse *pParse ; 
 } ;
struct Trigger { 
 char *zName ; 
 char *table ; 
 u8 op ; 
 u8 tr_tm ; 
 Expr *pWhen ; 
 IdList *pColumns ; 
 Schema *pSchema ; 
 Schema *pTabSchema ; 
 TriggerStep *step_list ; 
 Trigger *pNext ; 
 } ;
struct TriggerStep { 
 u8 op ; 
 u8 orconf ; 
 Trigger *pTrig ; 
 Select *pSelect ; 
 char *zTarget ; 
 Expr *pWhere ; 
 ExprList *pExprList ; 
 IdList *pIdList ; 
 TriggerStep *pNext ; 
 TriggerStep *pLast ; 
 } ;
typedef struct DbFixer DbFixer ;
struct DbFixer { 
 Parse *pParse ; 
 Schema *pSchema ; 
 int bVarOnly ; 
 const char *zDb ; 
 const char *zType ; 
 const Token *pName ; 
 } ;
struct StrAccum { 
 sqlite3 *db ; 
 char *zBase ; 
 char *zText ; 
 u32 nChar ; 
 u32 nAlloc ; 
 u32 mxAlloc ; 
 u8 accError ; 
 u8 printfFlags ; 
 } ;
typedef struct { 
 sqlite3 *db ; 
 char **pzErrMsg ; 
 int iDb ; 
 int rc ; 
 } InitData ;
struct Sqlite3Config { 
 int bMemstat ; 
 int bCoreMutex ; 
 int bFullMutex ; 
 int bOpenUri ; 
 int bUseCis ; 
 int mxStrlen ; 
 int neverCorrupt ; 
 int szLookaside ; 
 int nLookaside ; 
 int nStmtSpill ; 
 sqlite3_mem_methods m ; 
 sqlite3_mutex_methods mutex ; 
 sqlite3_pcache_methods2 pcache2 ; 
 void *pHeap ; 
 int nHeap ; 
 int mnReq, mxReq ; 
 sqlite3_int64 szMmap ; 
 sqlite3_int64 mxMmap ; 
 void *pScratch ; 
 int szScratch ; 
 int nScratch ; 
 void *pPage ; 
 int szPage ; 
 int nPage ; 
 int mxParserStack ; 
 int sharedCacheEnabled ; 
 u32 szPma ; 
 int isInit ; 
 int inProgress ; 
 int isMutexInit ; 
 int isMallocInit ; 
 int isPCacheInit ; 
 int nRefInitMutex ; 
 sqlite3_mutex *pInitMutex ; 
 void (*xLog)(void*,int,const char*) ; 
 void *pLogArg ; 
 int (*xTestCallback)(int) ; 
 int bLocaltimeFault ; 
 int iOnceResetThreshold ; 
 } ;
struct Walker { 
 Parse *pParse ; 
 int (*xExprCallback)(Walker*, Expr*) ; 
 int (*xSelectCallback)(Walker*,Select*) ; 
 void (*xSelectCallback2)(Walker*,Select*) ; 
 int walkerDepth ; 
 u8 eCode ; 
 union { NameContext *pNC ; 
 int n ; 
 int iCur ; 
 SrcList *pSrcList ; 
 struct SrcCount *pSrcCount ; 
 struct CCurHint *pCCurHint ; 
 int *aiCol ; 
 struct IdxCover *pIdxCover ; 
 } u ; 
 } ;
struct With { 
 int nCte ; 
 With *pOuter ; 
 struct Cte { char *zName ; 
 ExprList *pCols ; 
 Select *pSelect ; 
 const char *zCteErr ; 
 } a[1] ; 
 } ;
struct PrintfArguments { 
 int nArg ; 
 int nUsed ; 
 sqlite3_value **apArg ; 
 } ;
typedef struct VdbeOp Op ;
typedef struct VdbeSorter VdbeSorter ;
typedef struct AuxData AuxData ;
typedef struct VdbeCursor VdbeCursor ;
struct VdbeCursor { 
 u8 eCurType ; 
 i8 iDb ; 
 u8 nullRow ; 
 u8 deferredMoveto ; 
 u8 isTable ; 
 Bool isEphemeral:1 ; 
 Bool useRandomRowid:1 ; 
 Bool isOrdered:1 ; 
 Btree *pBtx ; 
 i64 seqCount ; 
 int *aAltMap ; 
 u32 cacheStatus ; 
 int seekResult ; 
 VdbeCursor *pAltCursor ; 
 union { BtCursor *pCursor ; 
 sqlite3_vtab_cursor *pVCur ; 
 int pseudoTableReg ; 
 VdbeSorter *pSorter ; 
 } uc ; 
 KeyInfo *pKeyInfo ; 
 u32 iHdrOffset ; 
 Pgno pgnoRoot ; 
 i16 nField ; 
 u16 nHdrParsed ; 
 i64 movetoTarget ; 
 u32 *aOffset ; 
 const u8 *aRow ; 
 u32 payloadSize ; 
 u32 szRow ; 
 u32 aType[1] ; 
 } ;
typedef struct VdbeFrame VdbeFrame ;
struct VdbeFrame { 
 Vdbe *v ; 
 VdbeFrame *pParent ; 
 Op *aOp ; 
 i64 *anExec ; 
 Mem *aMem ; 
 VdbeCursor **apCsr ; 
 u8 *aOnce ; 
 void *token ; 
 i64 lastRowid ; 
 AuxData *pAuxData ; 
 int nCursor ; 
 int pc ; 
 int nOp ; 
 int nMem ; 
 int nChildMem ; 
 int nChildCsr ; 
 int nChange ; 
 int nDbChange ; 
 } ;
struct Mem { 
 union MemValue { double r ; 
 i64 i ; 
 int nZero ; 
 FuncDef *pDef ; 
 RowSet *pRowSet ; 
 VdbeFrame *pFrame ; 
 } u ; 
 u16 flags ; 
 u8 enc ; 
 u8 eSubtype ; 
 int n ; 
 char *z ; 
 char *zMalloc ; 
 int szMalloc ; 
 u32 uTemp ; 
 sqlite3 *db ; 
 void (*xDel)(void*) ; 
 } ;
struct AuxData { 
 int iOp ; 
 int iArg ; 
 void *pAux ; 
 void (*xDelete)(void *) ; 
 AuxData *pNext ; 
 } ;
struct sqlite3_context { 
 Mem *pOut ; 
 FuncDef *pFunc ; 
 Mem *pMem ; 
 Vdbe *pVdbe ; 
 int iOp ; 
 int isError ; 
 u8 skipFlag ; 
 u8 fErrorOrAux ; 
 u8 argc ; 
 sqlite3_value *argv[1] ; 
 } ;
typedef struct ScanStatus ScanStatus ;
struct ScanStatus { 
 int addrExplain ; 
 int addrLoop ; 
 int addrVisit ; 
 int iSelectID ; 
 LogEst nEst ; 
 char *zName ; 
 } ;
struct Vdbe { 
 sqlite3 *db ; 
 Vdbe *pPrev,*pNext ; 
 Parse *pParse ; 
 ynVar nVar ; 
 u32 magic ; 
 int nMem ; 
 int nCursor ; 
 u32 cacheCtr ; 
 int pc ; 
 int rc ; 
 int nChange ; 
 int iStatement ; 
 i64 iCurrentTime ; 
 i64 nFkConstraint ; 
 i64 nStmtDefCons ; 
 i64 nStmtDefImmCons ; 
 Op *aOp ; 
 Mem *aMem ; 
 Mem **apArg ; 
 Mem *aColName ; 
 Mem *pResultSet ; 
 char *zErrMsg ; 
 VdbeCursor **apCsr ; 
 Mem *aVar ; 
 VList *pVList ; 
 i64 startTime ; 
 int nOp ; 
 u16 nResColumn ; 
 u8 errorAction ; 
 u8 minWriteFileFormat ; 
 bft expired:1 ; 
 bft doingRerun:1 ; 
 bft explain:2 ; 
 bft changeCntOn:1 ; 
 bft runOnlyOnce:1 ; 
 bft usesStmtJournal:1 ; 
 bft readOnly:1 ; 
 bft bIsReader:1 ; 
 bft isPrepareV2:1 ; 
 yDbMask btreeMask ; 
 yDbMask lockMask ; 
 u32 aCounter[5] ; 
 char *zSql ; 
 void *pFree ; 
 VdbeFrame *pFrame ; 
 VdbeFrame *pDelFrame ; 
 int nFrame ; 
 u32 expmask ; 
 SubProgram *pProgram ; 
 AuxData *pAuxData ; 
 } ;
struct PreUpdate { 
 Vdbe *v ; 
 VdbeCursor *pCsr ; 
 int op ; 
 u8 *aRecord ; 
 KeyInfo keyinfo ; 
 UnpackedRecord *pUnpacked ; 
 UnpackedRecord *pNewUnpacked ; 
 int iNewReg ; 
 i64 iKey1 ; 
 i64 iKey2 ; 
 Mem *aNew ; 
 Table *pTab ; 
 Index *pPk ; 
 } ;
typedef struct sqlite3StatType sqlite3StatType ;
typedef struct DateTime DateTime ;
struct DateTime { 
 sqlite3_int64 iJD ; 
 int Y, M, D ; 
 int h, m ; 
 int tz ; 
 double s ; 
 char validJD ; 
 char rawS ; 
 char validYMD ; 
 char validHMS ; 
 char validTZ ; 
 char tzSet ; 
 char isError ; 
 } ;
typedef struct BenignMallocHooks BenignMallocHooks ;
struct sqlite3_mutex { 
 pthread_mutex_t mutex ; 
 } ;
typedef struct ScratchFreeslot { 
 struct ScratchFreeslot *pNext ; 
 } ScratchFreeslot ;
typedef struct et_info { 
 char fmttype ; 
 etByte base ; 
 etByte flags ; 
 etByte type ; 
 etByte charset ; 
 etByte prefix ; 
 } et_info ;
struct sqlite3PrngType { 
 unsigned char isInit ; 
 unsigned char i, j ; 
 unsigned char s[256] ; 
 } sqlite3Prng ;
typedef struct winShm winShm ;
typedef struct winShmNode winShmNode ;
typedef struct winFile winFile ;
struct winFile { 
 const sqlite3_io_methods *pMethod ; 
 sqlite3_vfs *pVfs ; 
 HANDLE h ; 
 u8 locktype ; 
 short sharedLockByte ; 
 u8 ctrlFlags ; 
 DWORD lastErrno ; 
 winShm *pShm ; 
 const char *zPath ; 
 int szChunk ; 
 int nFetchOut ; 
 HANDLE hMap ; 
 void *pMapRegion ; 
 sqlite3_int64 mmapSize ; 
 sqlite3_int64 mmapSizeActual ; 
 sqlite3_int64 mmapSizeMax ; 
 } ;
typedef struct winVfsAppData winVfsAppData ;
struct winVfsAppData { 
 const sqlite3_io_methods *pMethod ; 
 void *pAppData ; 
 BOOL bNoLock ; 
 } ;
typedef struct winMemData winMemData ;
struct winMemData { 
 u32 magic1 ; 
 HANDLE hHeap ; 
 BOOL bOwned ; 
 u32 magic2 ; 
 } ;
struct winShmNode { 
 sqlite3_mutex *mutex ; 
 char *zFilename ; 
 winFile hFile ; 
 int szRegion ; 
 int nRegion ; 
 struct ShmRegion { HANDLE hMap ; 
 void *pMap ; 
 } *aRegion ; 
 DWORD lastErrno ; 
 int nRef ; 
 winShm *pFirst ; 
 winShmNode *pNext ; 
 } ;
struct winShm { 
 winShmNode *pShmNode ; 
 winShm *pNext ; 
 u8 hasMutex ; 
 u16 sharedMask ; 
 u16 exclMask ; 
 } ;
typedef struct EntropyGatherer EntropyGatherer ;
struct EntropyGatherer { 
 unsigned char *a ; 
 int na ; 
 int i ; 
 int nXor ; 
 } ;
struct Bitvec { 
 u32 iSize ; 
 u32 nSet ; 
 u32 iDivisor ; 
 union { BITVEC_TELEM aBitmap[BITVEC_NELEM] ; 
 u32 aHash[BITVEC_NINT] ; 
 Bitvec *apSub[BITVEC_NPTR] ; 
 } u ; 
 } ;
struct PCache { 
 PgHdr *pDirty, *pDirtyTail ; 
 PgHdr *pSynced ; 
 int nRefSum ; 
 int szCache ; 
 int szSpill ; 
 int szPage ; 
 int szExtra ; 
 u8 bPurgeable ; 
 u8 eCreate ; 
 int (*xStress)(void*,PgHdr*) ; 
 void *pStress ; 
 sqlite3_pcache *pCache ; 
 } ;
typedef struct PCache1 PCache1 ;
typedef struct PgHdr1 PgHdr1 ;
typedef struct PgFreeslot PgFreeslot ;
typedef struct PGroup PGroup ;
struct PgHdr1 { 
 sqlite3_pcache_page page ; 
 unsigned int iKey ; 
 u8 isPinned ; 
 u8 isBulkLocal ; 
 u8 isAnchor ; 
 PgHdr1 *pNext ; 
 PCache1 *pCache ; 
 PgHdr1 *pLruNext ; 
 PgHdr1 *pLruPrev ; 
 } ;
struct PGroup { 
 sqlite3_mutex *mutex ; 
 unsigned int nMaxPage ; 
 unsigned int nMinPage ; 
 unsigned int mxPinned ; 
 unsigned int nCurrentPage ; 
 PgHdr1 lru ; 
 } ;
struct PCache1 { 
 PGroup *pGroup ; 
 int szPage ; 
 int szExtra ; 
 int szAlloc ; 
 int bPurgeable ; 
 unsigned int nMin ; 
 unsigned int nMax ; 
 unsigned int n90pct ; 
 unsigned int iMaxKey ; 
 unsigned int nRecyclable ; 
 unsigned int nPage ; 
 unsigned int nHash ; 
 PgHdr1 **apHash ; 
 PgHdr1 *pFree ; 
 void *pBulk ; 
 } ;
struct PgFreeslot { 
 PgFreeslot *pNext ; 
 } ;
struct PCacheGlobal { 
 PGroup grp ; 
 int isInit ; 
 int separateCache ; 
 int nInitPage ; 
 int szSlot ; 
 int nSlot ; 
 int nReserve ; 
 void *pStart, *pEnd ; 
 sqlite3_mutex *mutex ; 
 PgFreeslot *pFree ; 
 int nFreeSlot ; 
 int bUnderPressure ; 
 } pcache1_g ;
struct RowSetEntry { 
 i64 v ; 
 struct RowSetEntry *pRight ; 
 struct RowSetEntry *pLeft ; 
 } ;
struct RowSetChunk { 
 struct RowSetChunk *pNextChunk ; 
 struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK] ; 
 } ;
struct RowSet { 
 struct RowSetChunk *pChunk ; 
 sqlite3 *db ; 
 struct RowSetEntry *pEntry ; 
 struct RowSetEntry *pLast ; 
 struct RowSetEntry *pFresh ; 
 struct RowSetEntry *pForest ; 
 u16 nFresh ; 
 u16 rsFlags ; 
 int iBatch ; 
 } ;
typedef struct Wal Wal ;
typedef struct PagerSavepoint PagerSavepoint ;
struct PagerSavepoint { 
 i64 iOffset ; 
 i64 iHdrOffset ; 
 Bitvec *pInSavepoint ; 
 Pgno nOrig ; 
 Pgno iSubRec ; 
 u32 aWalData[WAL_SAVEPOINT_NDATA] ; 
 } ;
struct Pager { 
 sqlite3_vfs *pVfs ; 
 u8 exclusiveMode ; 
 u8 journalMode ; 
 u8 useJournal ; 
 u8 noSync ; 
 u8 fullSync ; 
 u8 extraSync ; 
 u8 ckptSyncFlags ; 
 u8 walSyncFlags ; 
 u8 syncFlags ; 
 u8 tempFile ; 
 u8 noLock ; 
 u8 readOnly ; 
 u8 memDb ; 
 u8 eState ; 
 u8 eLock ; 
 u8 changeCountDone ; 
 u8 setMaster ; 
 u8 doNotSpill ; 
 u8 subjInMemory ; 
 u8 bUseFetch ; 
 u8 hasHeldSharedLock ; 
 Pgno dbSize ; 
 Pgno dbOrigSize ; 
 Pgno dbFileSize ; 
 Pgno dbHintSize ; 
 int errCode ; 
 int nRec ; 
 u32 cksumInit ; 
 u32 nSubRec ; 
 Bitvec *pInJournal ; 
 sqlite3_file *fd ; 
 sqlite3_file *jfd ; 
 sqlite3_file *sjfd ; 
 i64 journalOff ; 
 i64 journalHdr ; 
 sqlite3_backup *pBackup ; 
 PagerSavepoint *aSavepoint ; 
 int nSavepoint ; 
 u32 iDataVersion ; 
 char dbFileVers[16] ; 
 int nMmapOut ; 
 sqlite3_int64 szMmap ; 
 PgHdr *pMmapFreelist ; 
 u16 nExtra ; 
 i16 nReserve ; 
 u32 vfsFlags ; 
 u32 sectorSize ; 
 int pageSize ; 
 Pgno mxPgno ; 
 i64 journalSizeLimit ; 
 char *zFilename ; 
 char *zJournal ; 
 int (*xBusyHandler)(void*) ; 
 void *pBusyHandlerArg ; 
 int aStat[3] ; 
 void (*xReiniter)(DbPage*) ; 
 int (*xGet)(Pager*,Pgno,DbPage**,int) ; 
 char *pTmpSpace ; 
 PCache *pPCache ; 
 Wal *pWal ; 
 char *zWal ; 
 } ;
typedef struct WalIndexHdr WalIndexHdr ;
typedef struct WalIterator WalIterator ;
typedef struct WalCkptInfo WalCkptInfo ;
struct WalIndexHdr { 
 u32 iVersion ; 
 u32 unused ; 
 u32 iChange ; 
 u8 isInit ; 
 u8 bigEndCksum ; 
 u16 szPage ; 
 u32 mxFrame ; 
 u32 nPage ; 
 u32 aFrameCksum[2] ; 
 u32 aSalt[2] ; 
 u32 aCksum[2] ; 
 } ;
struct WalCkptInfo { 
 u32 nBackfill ; 
 u32 aReadMark[WAL_NREADER] ; 
 u8 aLock[SQLITE_SHM_NLOCK] ; 
 u32 nBackfillAttempted ; 
 u32 notUsed0 ; 
 } ;
struct Wal { 
 sqlite3_vfs *pVfs ; 
 sqlite3_file *pDbFd ; 
 sqlite3_file *pWalFd ; 
 u32 iCallback ; 
 i64 mxWalSize ; 
 int nWiData ; 
 int szFirstBlock ; 
 volatile u32 **apWiData ; 
 u32 szPage ; 
 i16 readLock ; 
 u8 syncFlags ; 
 u8 exclusiveMode ; 
 u8 writeLock ; 
 u8 ckptLock ; 
 u8 readOnly ; 
 u8 truncateOnCommit ; 
 u8 syncHeader ; 
 u8 padToSectorBoundary ; 
 WalIndexHdr hdr ; 
 u32 minFrame ; 
 u32 iReCksum ; 
 const char *zWalName ; 
 u32 nCkpt ; 
 } ;
struct WalIterator { 
 int iPrior ; 
 int nSegment ; 
 struct WalSegment { int iNext ; 
 ht_slot *aIndex ; 
 u32 *aPgno ; 
 int nEntry ; 
 int iZero ; 
 } aSegment[1] ; 
 } ;
typedef struct WalWriter { 
 Wal *pWal ; 
 sqlite3_file *pFd ; 
 sqlite3_int64 iSyncPoint ; 
 int syncFlags ; 
 int szPage ; 
 } WalWriter ;
typedef struct MemPage MemPage ;
typedef struct BtLock BtLock ;
typedef struct CellInfo CellInfo ;
struct MemPage { 
 u8 isInit ; 
 u8 bBusy ; 
 u8 intKey ; 
 u8 intKeyLeaf ; 
 Pgno pgno ; 
 u8 leaf ; 
 u8 hdrOffset ; 
 u8 childPtrSize ; 
 u8 max1bytePayload ; 
 u8 nOverflow ; 
 u16 maxLocal ; 
 u16 minLocal ; 
 u16 cellOffset ; 
 u16 nFree ; 
 u16 nCell ; 
 u16 maskPage ; 
 u16 aiOvfl[4] ; 
 u8 *apOvfl[4] ; 
 BtShared *pBt ; 
 u8 *aData ; 
 u8 *aDataEnd ; 
 u8 *aCellIdx ; 
 u8 *aDataOfst ; 
 DbPage *pDbPage ; 
 u16 (*xCellSize)(MemPage*,u8*) ; 
 void (*xParseCell)(MemPage*,u8*,CellInfo*) ; 
 } ;
struct BtLock { 
 Btree *pBtree ; 
 Pgno iTable ; 
 u8 eLock ; 
 BtLock *pNext ; 
 } ;
struct Btree { 
 sqlite3 *db ; 
 BtShared *pBt ; 
 u8 inTrans ; 
 u8 sharable ; 
 u8 locked ; 
 u8 hasIncrblobCur ; 
 int wantToLock ; 
 int nBackup ; 
 u32 iDataVersion ; 
 Btree *pNext ; 
 Btree *pPrev ; 
 BtLock lock ; 
 } ;
struct BtShared { 
 Pager *pPager ; 
 sqlite3 *db ; 
 BtCursor *pCursor ; 
 MemPage *pPage1 ; 
 u8 openFlags ; 
 u8 autoVacuum ; 
 u8 incrVacuum ; 
 u8 bDoTruncate ; 
 u8 inTransaction ; 
 u8 max1bytePayload ; 
 u16 btsFlags ; 
 u16 maxLocal ; 
 u16 minLocal ; 
 u16 maxLeaf ; 
 u16 minLeaf ; 
 u32 pageSize ; 
 u32 usableSize ; 
 int nTransaction ; 
 u32 nPage ; 
 void *pSchema ; 
 void (*xFreeSchema)(void*) ; 
 sqlite3_mutex *mutex ; 
 Bitvec *pHasContent ; 
 int nRef ; 
 BtShared *pNext ; 
 BtLock *pLock ; 
 Btree *pWriter ; 
 u8 *pTmpSpace ; 
 } ;
struct CellInfo { 
 i64 nKey ; 
 u8 *pPayload ; 
 u32 nPayload ; 
 u16 nLocal ; 
 u16 nSize ; 
 } ;
struct BtCursor { 
 Btree *pBtree ; 
 BtShared *pBt ; 
 BtCursor *pNext ; 
 Pgno *aOverflow ; 
 CellInfo info ; 
 i64 nKey ; 
 void *pKey ; 
 Pgno pgnoRoot ; 
 int nOvflAlloc ; 
 int skipNext ; 
 u8 curFlags ; 
 u8 curPagerFlags ; 
 u8 eState ; 
 u8 hints ; 
 i8 iPage ; 
 u8 curIntKey ; 
 struct KeyInfo *pKeyInfo ; 
 void *padding1 ; 
 u16 aiIdx[BTCURSOR_MAX_DEPTH] ; 
 MemPage *apPage[BTCURSOR_MAX_DEPTH] ; 
 } ;
typedef struct IntegrityCk IntegrityCk ;
struct IntegrityCk { 
 BtShared *pBt ; 
 Pager *pPager ; 
 u8 *aPgRef ; 
 Pgno nPage ; 
 int mxErr ; 
 int nErr ; 
 int mallocFailed ; 
 const char *zPfx ; 
 int v1, v2 ; 
 StrAccum errMsg ; 
 u32 *heap ; 
 } ;
typedef struct CellArray CellArray ;
struct CellArray { 
 int nCell ; 
 MemPage *pRef ; 
 u8 **apCell ; 
 u16 *szCell ; 
 } ;
struct sqlite3_backup { 
 sqlite3* pDestDb ; 
 Btree *pDest ; 
 u32 iDestSchema ; 
 int bDestLocked ; 
 Pgno iNext ; 
 sqlite3* pSrcDb ; 
 Btree *pSrc ; 
 int rc ; 
 Pgno nRemaining ; 
 Pgno nPagecount ; 
 int isAttached ; 
 sqlite3_backup *pNext ; 
 } ;
struct ValueNewStat4Ctx { 
 Parse *pParse ; 
 Index *pIdx ; 
 UnpackedRecord **ppRec ; 
 int iVal ; 
 } ;
struct ReusableSpace { 
 u8 *pSpace ; 
 int nFree ; 
 int nNeeded ; 
 } ;
typedef struct Incrblob Incrblob ;
struct Incrblob { 
 int nByte ; 
 int iOffset ; 
 u16 iCol ; 
 BtCursor *pCsr ; 
 sqlite3_stmt *pStmt ; 
 sqlite3 *db ; 
 char *zDb ; 
 Table *pTab ; 
 } ;
typedef struct MergeEngine MergeEngine ;
typedef struct PmaReader PmaReader ;
typedef struct PmaWriter PmaWriter ;
typedef struct SorterRecord SorterRecord ;
typedef struct SortSubtask SortSubtask ;
typedef struct SorterFile SorterFile ;
typedef struct SorterList SorterList ;
typedef struct IncrMerger IncrMerger ;
struct SorterFile { 
 sqlite3_file *pFd ; 
 i64 iEof ; 
 } ;
struct SorterList { 
 SorterRecord *pList ; 
 u8 *aMemory ; 
 int szPMA ; 
 } ;
struct MergeEngine { 
 int nTree ; 
 SortSubtask *pTask ; 
 int *aTree ; 
 PmaReader *aReadr ; 
 } ;
struct SortSubtask { 
 SQLiteThread *pThread ; 
 int bDone ; 
 VdbeSorter *pSorter ; 
 UnpackedRecord *pUnpacked ; 
 SorterList list ; 
 int nPMA ; 
 SorterCompare xCompare ; 
 SorterFile file ; 
 SorterFile file2 ; 
 } ;
struct VdbeSorter { 
 int mnPmaSize ; 
 int mxPmaSize ; 
 int mxKeysize ; 
 int pgsz ; 
 PmaReader *pReader ; 
 MergeEngine *pMerger ; 
 sqlite3 *db ; 
 KeyInfo *pKeyInfo ; 
 UnpackedRecord *pUnpacked ; 
 SorterList list ; 
 int iMemory ; 
 int nMemory ; 
 u8 bUsePMA ; 
 u8 bUseThreads ; 
 u8 iPrev ; 
 u8 nTask ; 
 u8 typeMask ; 
 SortSubtask aTask[1] ; 
 } ;
struct PmaReader { 
 i64 iReadOff ; 
 i64 iEof ; 
 int nAlloc ; 
 int nKey ; 
 sqlite3_file *pFd ; 
 u8 *aAlloc ; 
 u8 *aKey ; 
 u8 *aBuffer ; 
 int nBuffer ; 
 u8 *aMap ; 
 IncrMerger *pIncr ; 
 } ;
struct IncrMerger { 
 SortSubtask *pTask ; 
 MergeEngine *pMerger ; 
 i64 iStartOff ; 
 int mxSz ; 
 int bEof ; 
 int bUseThread ; 
 SorterFile aFile[2] ; 
 } ;
struct PmaWriter { 
 int eFWErr ; 
 u8 *aBuffer ; 
 int nBuffer ; 
 int iBufStart ; 
 int iBufEnd ; 
 i64 iWriteOff ; 
 sqlite3_file *pFd ; 
 } ;
struct SorterRecord { 
 int nVal ; 
 union { SorterRecord *pNext ; 
 int iNext ; 
 } u ; 
 } ;
typedef struct MemJournal MemJournal ;
typedef struct FilePoint FilePoint ;
typedef struct FileChunk FileChunk ;
struct FileChunk { 
 FileChunk *pNext ; 
 u8 zChunk[8] ; 
 } ;
struct FilePoint { 
 sqlite3_int64 iOffset ; 
 FileChunk *pChunk ; 
 } ;
struct MemJournal { 
 const sqlite3_io_methods *pMethod ; 
 int nChunkSize ; 
 int nSpill ; 
 int nSize ; 
 FileChunk *pFirst ; 
 FilePoint endpoint ; 
 FilePoint readpoint ; 
 int flags ; 
 sqlite3_vfs *pVfs ; 
 const char *zJournal ; 
 } ;
struct IdxCover { 
 Index *pIdx ; 
 int iCur ; 
 } ;
struct SrcCount { 
 SrcList *pSrc ; 
 int nThis ; 
 int nOther ; 
 } ;
typedef struct Stat4Accum Stat4Accum ;
typedef struct Stat4Sample Stat4Sample ;
struct Stat4Sample { 
 tRowcnt *anEq ; 
 tRowcnt *anDLt ; 
 } ;
struct Stat4Accum { 
 tRowcnt nRow ; 
 tRowcnt nPSample ; 
 int nCol ; 
 int nKeyCol ; 
 int mxSample ; 
 Stat4Sample current ; 
 u32 iPrn ; 
 Stat4Sample *aBest ; 
 int iMin ; 
 int nSample ; 
 int nMaxEqZero ; 
 int iGet ; 
 Stat4Sample *a ; 
 sqlite3 *db ; 
 } ;
typedef struct analysisInfo analysisInfo ;
struct analysisInfo { 
 sqlite3 *db ; 
 const char *zDatabase ; 
 } ;
struct TableLock { 
 int iDb ; 
 int iTab ; 
 u8 isWriteLock ; 
 const char *zLockName ; 
 } ;
struct compareInfo { 
 u8 matchAll ; 
 u8 matchOne ; 
 u8 matchSet ; 
 u8 noCase ; 
 } ;
typedef struct SumCtx SumCtx ;
struct SumCtx { 
 double rSum ; 
 i64 iSum ; 
 i64 cnt ; 
 u8 overflow ; 
 u8 approx ; 
 } ;
typedef struct CountCtx CountCtx ;
struct CountCtx { 
 i64 n ; 
 } ;
struct sqlite3_api_routines { 
 void * (*aggregate_context)(sqlite3_context*,int nBytes) ; 
 int (*aggregate_count)(sqlite3_context*) ; 
 int (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*)) ; 
 int (*bind_double)(sqlite3_stmt*,int,double) ; 
 int (*bind_int)(sqlite3_stmt*,int,int) ; 
 int (*bind_int64)(sqlite3_stmt*,int,sqlite_int64) ; 
 int (*bind_null)(sqlite3_stmt*,int) ; 
 int (*bind_parameter_count)(sqlite3_stmt*) ; 
 int (*bind_parameter_index)(sqlite3_stmt*,const char*zName) ; 
 const char * (*bind_parameter_name)(sqlite3_stmt*,int) ; 
 int (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*)) ; 
 int (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*)) ; 
 int (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*) ; 
 int (*busy_handler)(sqlite3*,int(*)(void*,int),void*) ; 
 int (*busy_timeout)(sqlite3*,int ms) ; 
 int (*changes)(sqlite3*) ; 
 int (*close)(sqlite3*) ; 
 int (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*, int eTextRep,const char*)) ; 
 int (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*, int eTextRep,const void*)) ; 
 const void * (*column_blob)(sqlite3_stmt*,int iCol) ; 
 int (*column_bytes)(sqlite3_stmt*,int iCol) ; 
 int (*column_bytes16)(sqlite3_stmt*,int iCol) ; 
 int (*column_count)(sqlite3_stmt*pStmt) ; 
 const char * (*column_database_name)(sqlite3_stmt*,int) ; 
 const void * (*column_database_name16)(sqlite3_stmt*,int) ; 
 const char * (*column_decltype)(sqlite3_stmt*,int i) ; 
 const void * (*column_decltype16)(sqlite3_stmt*,int) ; 
 double (*column_double)(sqlite3_stmt*,int iCol) ; 
 int (*column_int)(sqlite3_stmt*,int iCol) ; 
 sqlite_int64 (*column_int64)(sqlite3_stmt*,int iCol) ; 
 const char * (*column_name)(sqlite3_stmt*,int) ; 
 const void * (*column_name16)(sqlite3_stmt*,int) ; 
 const char * (*column_origin_name)(sqlite3_stmt*,int) ; 
 const void * (*column_origin_name16)(sqlite3_stmt*,int) ; 
 const char * (*column_table_name)(sqlite3_stmt*,int) ; 
 const void * (*column_table_name16)(sqlite3_stmt*,int) ; 
 const unsigned char * (*column_text)(sqlite3_stmt*,int iCol) ; 
 const void * (*column_text16)(sqlite3_stmt*,int iCol) ; 
 int (*column_type)(sqlite3_stmt*,int iCol) ; 
 sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol) ; 
 void * (*commit_hook)(sqlite3*,int(*)(void*),void*) ; 
 int (*complete)(const char*sql) ; 
 int (*complete16)(const void*sql) ; 
 int (*create_collation)(sqlite3*,const char*,int,void*, int(*)(void*,int,const void*,int,const void*)) ; 
 int (*create_collation16)(sqlite3*,const void*,int,void*, int(*)(void*,int,const void*,int,const void*)) ; 
 int (*create_function)(sqlite3*,const char*,int,int,void*, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*)) ; 
 int (*create_function16)(sqlite3*,const void*,int,int,void*, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*)) ; 
 int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*) ; 
 int (*data_count)(sqlite3_stmt*pStmt) ; 
 sqlite3 * (*db_handle)(sqlite3_stmt*) ; 
 int (*declare_vtab)(sqlite3*,const char*) ; 
 int (*enable_shared_cache)(int) ; 
 int (*errcode)(sqlite3*db) ; 
 const char * (*errmsg)(sqlite3*) ; 
 const void * (*errmsg16)(sqlite3*) ; 
 int (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**) ; 
 int (*expired)(sqlite3_stmt*) ; 
 int (*finalize)(sqlite3_stmt*pStmt) ; 
 void (*free)(void*) ; 
 void (*free_table)(char**result) ; 
 int (*get_autocommit)(sqlite3*) ; 
 void * (*get_auxdata)(sqlite3_context*,int) ; 
 int (*get_table)(sqlite3*,const char*,char***,int*,int*,char**) ; 
 int (*global_recover)(void) ; 
 void (*interruptx)(sqlite3*) ; 
 sqlite_int64 (*last_insert_rowid)(sqlite3*) ; 
 const char * (*libversion)(void) ; 
 int (*libversion_number)(void) ; 
 void *(*malloc)(int) ; 
 char * (*mprintf)(const char*,...) ; 
 int (*open)(const char*,sqlite3**) ; 
 int (*open16)(const void*,sqlite3**) ; 
 int (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**) ; 
 int (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**) ; 
 void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*) ; 
 void (*progress_handler)(sqlite3*,int,int(*)(void*),void*) ; 
 void *(*realloc)(void*,int) ; 
 int (*reset)(sqlite3_stmt*pStmt) ; 
 void (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*)) ; 
 void (*result_double)(sqlite3_context*,double) ; 
 void (*result_error)(sqlite3_context*,const char*,int) ; 
 void (*result_error16)(sqlite3_context*,const void*,int) ; 
 void (*result_int)(sqlite3_context*,int) ; 
 void (*result_int64)(sqlite3_context*,sqlite_int64) ; 
 void (*result_null)(sqlite3_context*) ; 
 void (*result_text)(sqlite3_context*,const char*,int,void(*)(void*)) ; 
 void (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*)) ; 
 void (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*)) ; 
 void (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*)) ; 
 void (*result_value)(sqlite3_context*,sqlite3_value*) ; 
 void * (*rollback_hook)(sqlite3*,void(*)(void*),void*) ; 
 int (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*, const char*,const char*),void*) ; 
 void (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*)) ; 
 char * (*snprintf)(int,char*,const char*,...) ; 
 int (*step)(sqlite3_stmt*) ; 
 int (*table_column_metadata)(sqlite3*,const char*,const char*,const char*, char const**,char const**,int*,int*,int*) ; 
 void (*thread_cleanup)(void) ; 
 int (*total_changes)(sqlite3*) ; 
 void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*) ; 
 int (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*) ; 
 void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*, sqlite_int64),void*) ; 
 void * (*user_data)(sqlite3_context*) ; 
 const void * (*value_blob)(sqlite3_value*) ; 
 int (*value_bytes)(sqlite3_value*) ; 
 int (*value_bytes16)(sqlite3_value*) ; 
 double (*value_double)(sqlite3_value*) ; 
 int (*value_int)(sqlite3_value*) ; 
 sqlite_int64 (*value_int64)(sqlite3_value*) ; 
 int (*value_numeric_type)(sqlite3_value*) ; 
 const unsigned char * (*value_text)(sqlite3_value*) ; 
 const void * (*value_text16)(sqlite3_value*) ; 
 const void * (*value_text16be)(sqlite3_value*) ; 
 const void * (*value_text16le)(sqlite3_value*) ; 
 int (*value_type)(sqlite3_value*) ; 
 char *(*vmprintf)(const char*,va_list) ; 
 int (*overload_function)(sqlite3*, const char *zFuncName, int nArg) ; 
 int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**) ; 
 int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**) ; 
 int (*clear_bindings)(sqlite3_stmt*) ; 
 int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*, void (*xDestroy)(void *)) ; 
 int (*bind_zeroblob)(sqlite3_stmt*,int,int) ; 
 int (*blob_bytes)(sqlite3_blob*) ; 
 int (*blob_close)(sqlite3_blob*) ; 
 int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64, int,sqlite3_blob**) ; 
 int (*blob_read)(sqlite3_blob*,void*,int,int) ; 
 int (*blob_write)(sqlite3_blob*,const void*,int,int) ; 
 int (*create_collation_v2)(sqlite3*,const char*,int,void*, int(*)(void*,int,const void*,int,const void*), void(*)(void*)) ; 
 int (*file_control)(sqlite3*,const char*,int,void*) ; 
 sqlite3_int64 (*memory_highwater)(int) ; 
 sqlite3_int64 (*memory_used)(void) ; 
 sqlite3_mutex *(*mutex_alloc)(int) ; 
 void (*mutex_enter)(sqlite3_mutex*) ; 
 void (*mutex_free)(sqlite3_mutex*) ; 
 void (*mutex_leave)(sqlite3_mutex*) ; 
 int (*mutex_try)(sqlite3_mutex*) ; 
 int (*open_v2)(const char*,sqlite3**,int,const char*) ; 
 int (*release_memory)(int) ; 
 void (*result_error_nomem)(sqlite3_context*) ; 
 void (*result_error_toobig)(sqlite3_context*) ; 
 int (*sleep)(int) ; 
 void (*soft_heap_limit)(int) ; 
 sqlite3_vfs *(*vfs_find)(const char*) ; 
 int (*vfs_register)(sqlite3_vfs*,int) ; 
 int (*vfs_unregister)(sqlite3_vfs*) ; 
 int (*xthreadsafe)(void) ; 
 void (*result_zeroblob)(sqlite3_context*,int) ; 
 void (*result_error_code)(sqlite3_context*,int) ; 
 int (*test_control)(int, ...) ; 
 void (*randomness)(int,void*) ; 
 sqlite3 *(*context_db_handle)(sqlite3_context*) ; 
 int (*extended_result_codes)(sqlite3*,int) ; 
 int (*limit)(sqlite3*,int,int) ; 
 sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*) ; 
 const char *(*sql)(sqlite3_stmt*) ; 
 int (*status)(int,int*,int*,int) ; 
 int (*backup_finish)(sqlite3_backup*) ; 
 sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*) ; 
 int (*backup_pagecount)(sqlite3_backup*) ; 
 int (*backup_remaining)(sqlite3_backup*) ; 
 int (*backup_step)(sqlite3_backup*,int) ; 
 const char *(*compileoption_get)(int) ; 
 int (*compileoption_used)(const char*) ; 
 int (*create_function_v2)(sqlite3*,const char*,int,int,void*, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*), void(*xDestroy)(void*)) ; 
 int (*db_config)(sqlite3*,int,...) ; 
 sqlite3_mutex *(*db_mutex)(sqlite3*) ; 
 int (*db_status)(sqlite3*,int,int*,int*,int) ; 
 int (*extended_errcode)(sqlite3*) ; 
 void (*log)(int,const char*,...) ; 
 sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64) ; 
 const char *(*sourceid)(void) ; 
 int (*stmt_status)(sqlite3_stmt*,int,int) ; 
 int (*strnicmp)(const char*,const char*,int) ; 
 int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*) ; 
 int (*wal_autocheckpoint)(sqlite3*,int) ; 
 int (*wal_checkpoint)(sqlite3*,const char*) ; 
 void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*) ; 
 int (*blob_reopen)(sqlite3_blob*,sqlite3_int64) ; 
 int (*vtab_config)(sqlite3*,int op,...) ; 
 int (*vtab_on_conflict)(sqlite3*) ; 
 int (*close_v2)(sqlite3*) ; 
 const char *(*db_filename)(sqlite3*,const char*) ; 
 int (*db_readonly)(sqlite3*,const char*) ; 
 int (*db_release_memory)(sqlite3*) ; 
 const char *(*errstr)(int) ; 
 int (*stmt_busy)(sqlite3_stmt*) ; 
 int (*stmt_readonly)(sqlite3_stmt*) ; 
 int (*stricmp)(const char*,const char*) ; 
 int (*uri_boolean)(const char*,const char*,int) ; 
 sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64) ; 
 const char *(*uri_parameter)(const char*,const char*) ; 
 char *(*vsnprintf)(int,char*,const char*,va_list) ; 
 int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*) ; 
 int (*auto_extension)(void(*)(void)) ; 
 int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64, void(*)(void*)) ; 
 int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64, void(*)(void*),unsigned char) ; 
 int (*cancel_auto_extension)(void(*)(void)) ; 
 int (*load_extension)(sqlite3*,const char*,const char*,char**) ; 
 void *(*malloc64)(sqlite3_uint64) ; 
 sqlite3_uint64 (*msize)(void*) ; 
 void *(*realloc64)(void*,sqlite3_uint64) ; 
 void (*reset_auto_extension)(void) ; 
 void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64, void(*)(void*)) ; 
 void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64, void(*)(void*), unsigned char) ; 
 int (*strglob)(const char*,const char*) ; 
 sqlite3_value *(*value_dup)(const sqlite3_value*) ; 
 void (*value_free)(sqlite3_value*) ; 
 int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64) ; 
 int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64) ; 
 unsigned int (*value_subtype)(sqlite3_value*) ; 
 void (*result_subtype)(sqlite3_context*,unsigned int) ; 
 int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int) ; 
 int (*strlike)(const char*,const char*,unsigned int) ; 
 int (*db_cacheflush)(sqlite3*) ; 
 int (*system_errno)(sqlite3*) ; 
 int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*) ; 
 char *(*expanded_sql)(sqlite3_stmt*) ; 
 void (*set_last_insert_rowid)(sqlite3*,sqlite3_int64) ; 
 } ;
typedef struct sqlite3AutoExtList sqlite3AutoExtList ;
typedef struct PragmaName { 
 const char *const zName ; 
 u8 ePragTyp ; 
 u8 mPragFlg ; 
 u8 iPragCName ; 
 u8 nPragCName ; 
 u32 iArg ; 
 } PragmaName ;
typedef struct PragmaVtab PragmaVtab ;
typedef struct PragmaVtabCursor PragmaVtabCursor ;
struct PragmaVtab { 
 sqlite3_vtab base ; 
 sqlite3 *db ; 
 const PragmaName *pName ; 
 u8 nHidden ; 
 u8 iHidden ; 
 } ;
struct PragmaVtabCursor { 
 sqlite3_vtab_cursor base ; 
 sqlite3_stmt *pPragma ; 
 sqlite_int64 iRowid ; 
 char *azArg[2] ; 
 } ;
typedef struct DistinctCtx DistinctCtx ;
struct DistinctCtx { 
 u8 isTnct ; 
 u8 eTnctType ; 
 int tabTnct ; 
 int addrTnct ; 
 } ;
typedef struct SortCtx SortCtx ;
struct SortCtx { 
 ExprList *pOrderBy ; 
 int nOBSat ; 
 int iECursor ; 
 int regReturn ; 
 int labelBkOut ; 
 int addrSortIndex ; 
 int labelDone ; 
 u8 sortFlags ; 
 u8 bOrderedInnerLoop ; 
 } ;
typedef struct TabResult { 
 char **azResult ; 
 char *zErrMsg ; 
 u32 nAlloc ; 
 u32 nRow ; 
 u32 nColumn ; 
 u32 nData ; 
 int rc ; 
 } TabResult ;
struct VtabCtx { 
 VTable *pVTable ; 
 Table *pTab ; 
 VtabCtx *pPrior ; 
 int bDeclared ; 
 } ;
typedef struct WhereClause WhereClause ;
typedef struct WhereMaskSet WhereMaskSet ;
typedef struct WhereOrInfo WhereOrInfo ;
typedef struct WhereAndInfo WhereAndInfo ;
typedef struct WhereLevel WhereLevel ;
typedef struct WhereLoop WhereLoop ;
typedef struct WherePath WherePath ;
typedef struct WhereTerm WhereTerm ;
typedef struct WhereLoopBuilder WhereLoopBuilder ;
typedef struct WhereScan WhereScan ;
typedef struct WhereOrCost WhereOrCost ;
typedef struct WhereOrSet WhereOrSet ;
struct WhereLevel { 
 int iLeftJoin ; 
 int iTabCur ; 
 int iIdxCur ; 
 int addrBrk ; 
 int addrNxt ; 
 int addrSkip ; 
 int addrCont ; 
 int addrFirst ; 
 int addrBody ; 
 u32 iLikeRepCntr ; 
 int addrLikeRep ; 
 u8 iFrom ; 
 u8 op, p3, p5 ; 
 int p1, p2 ; 
 union { struct { int nIn ; 
 struct InLoop { int iCur ; 
 int addrInTop ; 
 u8 eEndLoopOp ; 
 } *aInLoop ; 
 } in ; 
 Index *pCovidx ; 
 } u ; 
 struct WhereLoop *pWLoop ; 
 Bitmask notReady ; 
 } ;
struct WhereLoop { 
 Bitmask prereq ; 
 Bitmask maskSelf ; 
 u8 iTab ; 
 u8 iSortIdx ; 
 LogEst rSetup ; 
 LogEst rRun ; 
 LogEst nOut ; 
 union { struct { u16 nEq ; 
 u16 nBtm ; 
 u16 nTop ; 
 Index *pIndex ; 
 } btree ; 
 struct { int idxNum ; 
 u8 needFree ; 
 i8 isOrdered ; 
 u16 omitMask ; 
 char *idxStr ; 
 } vtab ; 
 } u ; 
 u32 wsFlags ; 
 u16 nLTerm ; 
 u16 nSkip ; 
 u16 nLSlot ; 
 WhereTerm **aLTerm ; 
 WhereLoop *pNextLoop ; 
 WhereTerm *aLTermSpace[3] ; 
 } ;
struct WhereOrCost { 
 Bitmask prereq ; 
 LogEst rRun ; 
 LogEst nOut ; 
 } ;
struct WhereOrSet { 
 u16 n ; 
 WhereOrCost a[N_OR_COST] ; 
 } ;
struct WherePath { 
 Bitmask maskLoop ; 
 Bitmask revLoop ; 
 LogEst nRow ; 
 LogEst rCost ; 
 LogEst rUnsorted ; 
 i8 isOrdered ; 
 WhereLoop **aLoop ; 
 } ;
struct WhereTerm { 
 Expr *pExpr ; 
 WhereClause *pWC ; 
 LogEst truthProb ; 
 u16 wtFlags ; 
 u16 eOperator ; 
 u8 nChild ; 
 u8 eMatchOp ; 
 int iParent ; 
 int leftCursor ; 
 int iField ; 
 union { int leftColumn ; 
 WhereOrInfo *pOrInfo ; 
 WhereAndInfo *pAndInfo ; 
 } u ; 
 Bitmask prereqRight ; 
 Bitmask prereqAll ; 
 } ;
struct WhereScan { 
 WhereClause *pOrigWC ; 
 WhereClause *pWC ; 
 const char *zCollName ; 
 Expr *pIdxExpr ; 
 char idxaff ; 
 unsigned char nEquiv ; 
 unsigned char iEquiv ; 
 u32 opMask ; 
 int k ; 
 int aiCur[11] ; 
 i16 aiColumn[11] ; 
 } ;
struct WhereClause { 
 WhereInfo *pWInfo ; 
 WhereClause *pOuter ; 
 u8 op ; 
 int nTerm ; 
 int nSlot ; 
 WhereTerm *a ; 
 WhereTerm aStatic[8] ; 
 } ;
struct WhereOrInfo { 
 WhereClause wc ; 
 Bitmask indexable ; 
 } ;
struct WhereAndInfo { 
 WhereClause wc ; 
 } ;
struct WhereMaskSet { 
 int n ; 
 int ix[BMS] ; 
 } ;
struct WhereLoopBuilder { 
 WhereInfo *pWInfo ; 
 WhereClause *pWC ; 
 ExprList *pOrderBy ; 
 WhereLoop *pNew ; 
 WhereOrSet *pOrSet ; 
 unsigned int bldFlags ; 
 } ;
struct WhereInfo { 
 Parse *pParse ; 
 SrcList *pTabList ; 
 ExprList *pOrderBy ; 
 ExprList *pResultSet ; 
 LogEst iLimit ; 
 int aiCurOnePass[2] ; 
 int iContinue ; 
 int iBreak ; 
 int savedNQueryLoop ; 
 u16 wctrlFlags ; 
 u8 nLevel ; 
 i8 nOBSat ; 
 u8 sorted ; 
 u8 eOnePass ; 
 u8 untestedTerms ; 
 u8 eDistinct ; 
 u8 bOrderedInnerLoop ; 
 int iTop ; 
 WhereLoop *pLoops ; 
 Bitmask revMask ; 
 LogEst nRowOut ; 
 WhereClause sWC ; 
 WhereMaskSet sMaskSet ; 
 WhereLevel a[1] ; 
 } ;
struct LimitVal { 
 Expr *pLimit ; 
 Expr *pOffset ; 
 } ;
struct TrigEvent { 
 int a ; 
 IdList * b ; 
 } ;
typedef union { 
 int yyinit ; 
 sqlite3ParserTOKENTYPE yy0 ; 
 Expr* yy72 ; 
 TriggerStep* yy145 ; 
 ExprList* yy148 ; 
 SrcList* yy185 ; 
 ExprSpan yy190 ; 
 int yy194 ; 
 Select* yy243 ; 
 IdList* yy254 ; 
 With* yy285 ; 
 struct TrigEvent yy332 ; 
 struct LimitVal yy354 ; 
 struct { int value ; 
 int mask ; 
 } yy497 ; 
 } YYMINORTYPE ;
struct yyStackEntry { 
 YYACTIONTYPE stateno ; 
 YYCODETYPE major ; 
 YYMINORTYPE minor ; 
 } ;
typedef struct yyStackEntry yyStackEntry ;
struct yyParser { 
 yyStackEntry *yytos ; 
 int yyerrcnt ; 
 sqlite3ParserARG_SDECL int yystksz ; 
 yyStackEntry *yystack ; 
 yyStackEntry yystk0 ; 
 } ;
typedef struct yyParser yyParser ;
typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module ;
typedef struct sqlite3_tokenizer sqlite3_tokenizer ;
typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor ;
struct sqlite3_tokenizer_module { 
 int iVersion ; 
 int (*xCreate)( int argc, const char *const*argv, sqlite3_tokenizer **ppTokenizer ) ; 
 int (*xDestroy)(sqlite3_tokenizer *pTokenizer) ; 
 int (*xOpen)( sqlite3_tokenizer *pTokenizer, const char *pInput, int nBytes, sqlite3_tokenizer_cursor **ppCursor ) ; 
 int (*xClose)(sqlite3_tokenizer_cursor *pCursor) ; 
 int (*xNext)( sqlite3_tokenizer_cursor *pCursor, const char **ppToken, int *pnBytes, int *piStartOffset, int *piEndOffset, int *piPosition ) ; 
 int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid) ; 
 } ;
struct sqlite3_tokenizer { 
 const sqlite3_tokenizer_module *pModule ; 
 } ;
struct sqlite3_tokenizer_cursor { 
 sqlite3_tokenizer *pTokenizer ; 
 } ;
typedef struct Fts3Hash Fts3Hash ;
typedef struct Fts3HashElem Fts3HashElem ;
struct Fts3Hash { 
 char keyClass ; 
 char copyKey ; 
 int count ; 
 Fts3HashElem *first ; 
 int htsize ; 
 struct _fts3ht { int count ; 
 Fts3HashElem *chain ; 
 } *ht ; 
 } ;
struct Fts3HashElem { 
 Fts3HashElem *next, *prev ; 
 void *data ; 
 void *pKey ; 
 int nKey ; 
 } ;
typedef struct Fts3Table Fts3Table ;
typedef struct Fts3Cursor Fts3Cursor ;
typedef struct Fts3Expr Fts3Expr ;
typedef struct Fts3Phrase Fts3Phrase ;
typedef struct Fts3PhraseToken Fts3PhraseToken ;
typedef struct Fts3Doclist Fts3Doclist ;
typedef struct Fts3SegFilter Fts3SegFilter ;
typedef struct Fts3DeferredToken Fts3DeferredToken ;
typedef struct Fts3SegReader Fts3SegReader ;
typedef struct Fts3MultiSegReader Fts3MultiSegReader ;
typedef struct MatchinfoBuffer MatchinfoBuffer ;
struct Fts3Table { 
 sqlite3_vtab base ; 
 sqlite3 *db ; 
 const char *zDb ; 
 const char *zName ; 
 int nColumn ; 
 char **azColumn ; 
 u8 *abNotindexed ; 
 sqlite3_tokenizer *pTokenizer ; 
 char *zContentTbl ; 
 char *zLanguageid ; 
 int nAutoincrmerge ; 
 u32 nLeafAdd ; 
 sqlite3_stmt *aStmt[40] ; 
 sqlite3_stmt *pSeekStmt ; 
 char *zReadExprlist ; 
 char *zWriteExprlist ; 
 int nNodeSize ; 
 u8 bFts4 ; 
 u8 bHasStat ; 
 u8 bHasDocsize ; 
 u8 bDescIdx ; 
 u8 bIgnoreSavepoint ; 
 int nPgsz ; 
 char *zSegmentsTbl ; 
 sqlite3_blob *pSegments ; 
 int nIndex ; 
 struct Fts3Index { int nPrefix ; 
 Fts3Hash hPending ; 
 } *aIndex ; 
 int nMaxPendingData ; 
 int nPendingData ; 
 sqlite_int64 iPrevDocid ; 
 int iPrevLangid ; 
 int bPrevDelete ; 
 } ;
struct Fts3Cursor { 
 sqlite3_vtab_cursor base ; 
 i16 eSearch ; 
 u8 isEof ; 
 u8 isRequireSeek ; 
 u8 bSeekStmt ; 
 sqlite3_stmt *pStmt ; 
 Fts3Expr *pExpr ; 
 int iLangid ; 
 int nPhrase ; 
 Fts3DeferredToken *pDeferred ; 
 sqlite3_int64 iPrevId ; 
 char *pNextId ; 
 char *aDoclist ; 
 int nDoclist ; 
 u8 bDesc ; 
 int eEvalmode ; 
 int nRowAvg ; 
 sqlite3_int64 nDoc ; 
 i64 iMinDocid ; 
 i64 iMaxDocid ; 
 int isMatchinfoNeeded ; 
 MatchinfoBuffer *pMIBuffer ; 
 } ;
struct Fts3Doclist { 
 char *aAll ; 
 int nAll ; 
 char *pNextDocid ; 
 sqlite3_int64 iDocid ; 
 int bFreeList ; 
 char *pList ; 
 int nList ; 
 } ;
struct Fts3PhraseToken { 
 char *z ; 
 int n ; 
 int isPrefix ; 
 int bFirst ; 
 Fts3DeferredToken *pDeferred ; 
 Fts3MultiSegReader *pSegcsr ; 
 } ;
struct Fts3Phrase { 
 Fts3Doclist doclist ; 
 int bIncr ; 
 int iDoclistToken ; 
 char *pOrPoslist ; 
 i64 iOrDocid ; 
 int nToken ; 
 int iColumn ; 
 Fts3PhraseToken aToken[1] ; 
 } ;
struct Fts3Expr { 
 int eType ; 
 int nNear ; 
 Fts3Expr *pParent ; 
 Fts3Expr *pLeft ; 
 Fts3Expr *pRight ; 
 Fts3Phrase *pPhrase ; 
 sqlite3_int64 iDocid ; 
 u8 bEof ; 
 u8 bStart ; 
 u8 bDeferred ; 
 int iPhrase ; 
 u32 *aMI ; 
 } ;
struct Fts3SegFilter { 
 const char *zTerm ; 
 int nTerm ; 
 int iCol ; 
 int flags ; 
 } ;
struct Fts3MultiSegReader { 
 Fts3SegReader **apSegment ; 
 int nSegment ; 
 int nAdvance ; 
 Fts3SegFilter *pFilter ; 
 char *aBuffer ; 
 int nBuffer ; 
 int iColFilter ; 
 int bRestart ; 
 int nCost ; 
 int bLookup ; 
 char *zTerm ; 
 int nTerm ; 
 char *aDoclist ; 
 int nDoclist ; 
 } ;
typedef struct TermSelect TermSelect ;
struct TermSelect { 
 char *aaOutput[16] ; 
 int anOutput[16] ; 
 } ;
typedef struct TokenDoclist TokenDoclist ;
struct TokenDoclist { 
 int bIgnore ; 
 sqlite3_int64 iDocid ; 
 char *pList ; 
 int nList ; 
 } ;
typedef struct Fts3TokenAndCost Fts3TokenAndCost ;
struct Fts3TokenAndCost { 
 Fts3Phrase *pPhrase ; 
 int iToken ; 
 Fts3PhraseToken *pToken ; 
 Fts3Expr *pRoot ; 
 int nOvfl ; 
 int iCol ; 
 } ;
typedef struct Fts3auxTable Fts3auxTable ;
typedef struct Fts3auxCursor Fts3auxCursor ;
struct Fts3auxTable { 
 sqlite3_vtab base ; 
 Fts3Table *pFts3Tab ; 
 } ;
struct Fts3auxCursor { 
 sqlite3_vtab_cursor base ; 
 Fts3MultiSegReader csr ; 
 Fts3SegFilter filter ; 
 char *zStop ; 
 int nStop ; 
 int iLangid ; 
 int isEof ; 
 sqlite3_int64 iRowid ; 
 int iCol ; 
 int nStat ; 
 struct Fts3auxColstats { sqlite3_int64 nDoc ; 
 sqlite3_int64 nOcc ; 
 } *aStat ; 
 } ;
typedef struct ParseContext ParseContext ;
struct ParseContext { 
 sqlite3_tokenizer *pTokenizer ; 
 int iLangid ; 
 const char **azCol ; 
 int bFts4 ; 
 int nCol ; 
 int iDefaultCol ; 
 int isNot ; 
 sqlite3_context *pCtx ; 
 int nNest ; 
 } ;
typedef struct porter_tokenizer { 
 sqlite3_tokenizer base ; 
 } porter_tokenizer ;
typedef struct porter_tokenizer_cursor { 
 sqlite3_tokenizer_cursor base ; 
 const char *zInput ; 
 int nInput ; 
 int iOffset ; 
 int iToken ; 
 char *zToken ; 
 int nAllocated ; 
 } porter_tokenizer_cursor ;
typedef struct simple_tokenizer { 
 sqlite3_tokenizer base ; 
 char delim[128] ; 
 } simple_tokenizer ;
typedef struct simple_tokenizer_cursor { 
 sqlite3_tokenizer_cursor base ; 
 const char *pInput ; 
 int nBytes ; 
 int iOffset ; 
 int iToken ; 
 char *pToken ; 
 int nTokenAllocated ; 
 } simple_tokenizer_cursor ;
typedef struct Fts3tokTable Fts3tokTable ;
typedef struct Fts3tokCursor Fts3tokCursor ;
struct Fts3tokTable { 
 sqlite3_vtab base ; 
 const sqlite3_tokenizer_module *pMod ; 
 sqlite3_tokenizer *pTok ; 
 } ;
struct Fts3tokCursor { 
 sqlite3_vtab_cursor base ; 
 char *zInput ; 
 sqlite3_tokenizer_cursor *pCsr ; 
 int iRowid ; 
 const char *zToken ; 
 int nToken ; 
 int iStart ; 
 int iEnd ; 
 int iPos ; 
 } ;
typedef struct PendingList PendingList ;
typedef struct SegmentNode SegmentNode ;
typedef struct SegmentWriter SegmentWriter ;
struct PendingList { 
 int nData ; 
 char *aData ; 
 int nSpace ; 
 sqlite3_int64 iLastDocid ; 
 sqlite3_int64 iLastCol ; 
 sqlite3_int64 iLastPos ; 
 } ;
struct Fts3DeferredToken { 
 Fts3PhraseToken *pToken ; 
 int iCol ; 
 Fts3DeferredToken *pNext ; 
 PendingList *pList ; 
 } ;
struct Fts3SegReader { 
 int iIdx ; 
 u8 bLookup ; 
 u8 rootOnly ; 
 sqlite3_int64 iStartBlock ; 
 sqlite3_int64 iLeafEndBlock ; 
 sqlite3_int64 iEndBlock ; 
 sqlite3_int64 iCurrentBlock ; 
 char *aNode ; 
 int nNode ; 
 int nPopulate ; 
 sqlite3_blob *pBlob ; 
 Fts3HashElem **ppNextElem ; 
 int nTerm ; 
 char *zTerm ; 
 int nTermAlloc ; 
 char *aDoclist ; 
 int nDoclist ; 
 char *pOffsetList ; 
 int nOffsetList ; 
 sqlite3_int64 iDocid ; 
 } ;
struct SegmentWriter { 
 SegmentNode *pTree ; 
 sqlite3_int64 iFirst ; 
 sqlite3_int64 iFree ; 
 char *zTerm ; 
 int nTerm ; 
 int nMalloc ; 
 char *zMalloc ; 
 int nSize ; 
 int nData ; 
 char *aData ; 
 i64 nLeafData ; 
 } ;
struct SegmentNode { 
 SegmentNode *pParent ; 
 SegmentNode *pRight ; 
 SegmentNode *pLeftmost ; 
 int nEntry ; 
 char *zTerm ; 
 int nTerm ; 
 int nMalloc ; 
 char *zMalloc ; 
 int nData ; 
 char *aData ; 
 } ;
typedef struct IncrmergeWriter IncrmergeWriter ;
typedef struct NodeWriter NodeWriter ;
typedef struct Blob Blob ;
typedef struct NodeReader NodeReader ;
struct Blob { 
 char *a ; 
 int n ; 
 int nAlloc ; 
 } ;
struct NodeWriter { 
 sqlite3_int64 iBlock ; 
 Blob key ; 
 Blob block ; 
 } ;
struct IncrmergeWriter { 
 int nLeafEst ; 
 int nWork ; 
 sqlite3_int64 iAbsLevel ; 
 int iIdx ; 
 sqlite3_int64 iStart ; 
 sqlite3_int64 iEnd ; 
 sqlite3_int64 nLeafData ; 
 u8 bNoLeafData ; 
 NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT] ; 
 } ;
struct NodeReader { 
 const char *aNode ; 
 int nNode ; 
 int iOff ; 
 sqlite3_int64 iChild ; 
 Blob term ; 
 const char *aDoclist ; 
 int nDoclist ; 
 } ;
typedef struct LoadDoclistCtx LoadDoclistCtx ;
struct LoadDoclistCtx { 
 Fts3Cursor *pCsr ; 
 int nPhrase ; 
 int nToken ; 
 } ;
typedef struct SnippetIter SnippetIter ;
typedef struct SnippetPhrase SnippetPhrase ;
typedef struct SnippetFragment SnippetFragment ;
struct SnippetIter { 
 Fts3Cursor *pCsr ; 
 int iCol ; 
 int nSnippet ; 
 int nPhrase ; 
 SnippetPhrase *aPhrase ; 
 int iCurrent ; 
 } ;
struct SnippetPhrase { 
 int nToken ; 
 char *pList ; 
 int iHead ; 
 char *pHead ; 
 int iTail ; 
 char *pTail ; 
 } ;
struct SnippetFragment { 
 int iCol ; 
 int iPos ; 
 u64 covered ; 
 u64 hlmask ; 
 } ;
typedef struct MatchInfo MatchInfo ;
struct MatchInfo { 
 Fts3Cursor *pCursor ; 
 int nCol ; 
 int nPhrase ; 
 sqlite3_int64 nDoc ; 
 char flag ; 
 u32 *aMatchinfo ; 
 } ;
struct MatchinfoBuffer { 
 u8 aRef[3] ; 
 int nElem ; 
 int bGlobal ; 
 char *zMatchinfo ; 
 u32 aMatchinfo[1] ; 
 } ;
typedef struct StrBuffer StrBuffer ;
struct StrBuffer { 
 char *z ; 
 int n ; 
 int nAlloc ; 
 } ;
typedef struct LcsIterator LcsIterator ;
struct LcsIterator { 
 Fts3Expr *pExpr ; 
 int iPosOffset ; 
 char *pRead ; 
 int iPos ; 
 } ;
typedef struct TermOffset TermOffset ;
typedef struct TermOffsetCtx TermOffsetCtx ;
struct TermOffset { 
 char *pList ; 
 int iPos ; 
 int iOff ; 
 } ;
struct TermOffsetCtx { 
 Fts3Cursor *pCsr ; 
 int iCol ; 
 int iTerm ; 
 sqlite3_int64 iDocid ; 
 TermOffset *aTerm ; 
 } ;
typedef struct unicode_tokenizer unicode_tokenizer ;
typedef struct unicode_cursor unicode_cursor ;
struct unicode_tokenizer { 
 sqlite3_tokenizer base ; 
 int bRemoveDiacritic ; 
 int nException ; 
 int *aiException ; 
 } ;
struct unicode_cursor { 
 sqlite3_tokenizer_cursor base ; 
 const unsigned char *aInput ; 
 int nInput ; 
 int iOff ; 
 int iToken ; 
 char *zToken ; 
 int nAlloc ; 
 } ;
typedef struct sqlite3rbu sqlite3rbu ;
typedef struct RbuFrame RbuFrame ;
typedef struct RbuObjIter RbuObjIter ;
typedef struct RbuState RbuState ;
typedef struct rbu_vfs rbu_vfs ;
typedef struct rbu_file rbu_file ;
typedef struct RbuUpdateStmt RbuUpdateStmt ;
struct RbuState { 
 int eStage ; 
 char *zTbl ; 
 char *zIdx ; 
 i64 iWalCksum ; 
 int nRow ; 
 i64 nProgress ; 
 u32 iCookie ; 
 i64 iOalSz ; 
 i64 nPhaseOneStep ; 
 } ;
struct RbuUpdateStmt { 
 char *zMask ; 
 sqlite3_stmt *pUpdate ; 
 RbuUpdateStmt *pNext ; 
 } ;
struct RbuObjIter { 
 sqlite3_stmt *pTblIter ; 
 sqlite3_stmt *pIdxIter ; 
 int nTblCol ; 
 char **azTblCol ; 
 char **azTblType ; 
 int *aiSrcOrder ; 
 u8 *abTblPk ; 
 u8 *abNotNull ; 
 u8 *abIndexed ; 
 int eType ; 
 int bCleanup ; 
 const char *zTbl ; 
 const char *zDataTbl ; 
 const char *zIdx ; 
 int iTnum ; 
 int iPkTnum ; 
 int bUnique ; 
 int nIndex ; 
 int nCol ; 
 sqlite3_stmt *pSelect ; 
 sqlite3_stmt *pInsert ; 
 sqlite3_stmt *pDelete ; 
 sqlite3_stmt *pTmpInsert ; 
 RbuUpdateStmt *pRbuUpdate ; 
 } ;
struct RbuFrame { 
 u32 iDbPage ; 
 u32 iWalFrame ; 
 } ;
struct sqlite3rbu { 
 int eStage ; 
 sqlite3 *dbMain ; 
 sqlite3 *dbRbu ; 
 char *zTarget ; 
 char *zRbu ; 
 char *zState ; 
 char zStateDb[5] ; 
 int rc ; 
 char *zErrmsg ; 
 int nStep ; 
 int nProgress ; 
 RbuObjIter objiter ; 
 const char *zVfsName ; 
 rbu_file *pTargetFd ; 
 int nPagePerSector ; 
 i64 iOalSz ; 
 i64 nPhaseOneStep ; 
 u32 iMaxFrame ; 
 u32 mLock ; 
 int nFrame ; 
 int nFrameAlloc ; 
 RbuFrame *aFrame ; 
 int pgsz ; 
 u8 *aBuf ; 
 i64 iWalCksum ; 
 int nRbu ; 
 rbu_file *pRbuFd ; 
 } ;
struct rbu_vfs { 
 sqlite3_vfs base ; 
 sqlite3_vfs *pRealVfs ; 
 sqlite3_mutex *mutex ; 
 rbu_file *pMain ; 
 } ;
struct rbu_file { 
 sqlite3_file base ; 
 sqlite3_file *pReal ; 
 rbu_vfs *pRbuVfs ; 
 sqlite3rbu *pRbu ; 
 int openFlags ; 
 u32 iCookie ; 
 u8 iWriteVer ; 
 u8 bNolock ; 
 int nShm ; 
 char **apShm ; 
 char *zDel ; 
 const char *zWal ; 
 rbu_file *pWalFd ; 
 rbu_file *pMainNext ; 
 } ;
typedef struct sqlite3 sqlite3 ;
typedef struct sqlite3_file sqlite3_file ;
struct sqlite3_file { 
 const struct sqlite3_io_methods *pMethods ; 
 } ;
typedef struct sqlite3_io_methods sqlite3_io_methods ;
struct sqlite3_io_methods { 
 int iVersion ; 
 int (*xClose)(sqlite3_file*) ; 
 int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst) ; 
 int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst) ; 
 int (*xTruncate)(sqlite3_file*, sqlite3_int64 size) ; 
 int (*xSync)(sqlite3_file*, int flags) ; 
 int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize) ; 
 int (*xLock)(sqlite3_file*, int) ; 
 int (*xUnlock)(sqlite3_file*, int) ; 
 int (*xCheckReservedLock)(sqlite3_file*, int *pResOut) ; 
 int (*xFileControl)(sqlite3_file*, int op, void *pArg) ; 
 int (*xSectorSize)(sqlite3_file*) ; 
 int (*xDeviceCharacteristics)(sqlite3_file*) ; 
 int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**) ; 
 int (*xShmLock)(sqlite3_file*, int offset, int n, int flags) ; 
 void (*xShmBarrier)(sqlite3_file*) ; 
 int (*xShmUnmap)(sqlite3_file*, int deleteFlag) ; 
 int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp) ; 
 int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p) ; 
 } ;
typedef struct sqlite3_mutex sqlite3_mutex ;
typedef struct sqlite3_api_routines sqlite3_api_routines ;
typedef struct sqlite3_vfs sqlite3_vfs ;
struct sqlite3_vfs { 
 int iVersion ; 
 int szOsFile ; 
 int mxPathname ; 
 sqlite3_vfs *pNext ; 
 const char *zName ; 
 void *pAppData ; 
 int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*, int flags, int *pOutFlags) ; 
 int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir) ; 
 int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut) ; 
 int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut) ; 
 void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename) ; 
 void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg) ; 
 void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void) ; 
 void (*xDlClose)(sqlite3_vfs*, void*) ; 
 int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut) ; 
 int (*xSleep)(sqlite3_vfs*, int microseconds) ; 
 int (*xCurrentTime)(sqlite3_vfs*, double*) ; 
 int (*xGetLastError)(sqlite3_vfs*, int, char *) ; 
 int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*) ; 
 int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr) ; 
 sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName) ; 
 const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName) ; 
 } ;
typedef struct sqlite3_mem_methods sqlite3_mem_methods ;
struct sqlite3_mem_methods { 
 void *(*xMalloc)(int) ; 
 void (*xFree)(void*) ; 
 void *(*xRealloc)(void*,int) ; 
 int (*xSize)(void*) ; 
 int (*xRoundup)(int) ; 
 int (*xInit)(void*) ; 
 void (*xShutdown)(void*) ; 
 void *pAppData ; 
 } ;
typedef struct sqlite3_stmt sqlite3_stmt ;
typedef struct Mem sqlite3_value ;
typedef struct sqlite3_context sqlite3_context ;
typedef struct sqlite3_vtab sqlite3_vtab ;
typedef struct sqlite3_index_info sqlite3_index_info ;
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor ;
typedef struct sqlite3_module sqlite3_module ;
struct sqlite3_module { 
 int iVersion ; 
 int (*xCreate)(sqlite3*, void *pAux, int argc, const char *const*argv, sqlite3_vtab **ppVTab, char**) ; 
 int (*xConnect)(sqlite3*, void *pAux, int argc, const char *const*argv, sqlite3_vtab **ppVTab, char**) ; 
 int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*) ; 
 int (*xDisconnect)(sqlite3_vtab *pVTab) ; 
 int (*xDestroy)(sqlite3_vtab *pVTab) ; 
 int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor) ; 
 int (*xClose)(sqlite3_vtab_cursor*) ; 
 int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr, int argc, sqlite3_value **argv) ; 
 int (*xNext)(sqlite3_vtab_cursor*) ; 
 int (*xEof)(sqlite3_vtab_cursor*) ; 
 int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int) ; 
 int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid) ; 
 int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *) ; 
 int (*xBegin)(sqlite3_vtab *pVTab) ; 
 int (*xSync)(sqlite3_vtab *pVTab) ; 
 int (*xCommit)(sqlite3_vtab *pVTab) ; 
 int (*xRollback)(sqlite3_vtab *pVTab) ; 
 int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName, void (**pxFunc)(sqlite3_context*,int,sqlite3_value**), void **ppArg) ; 
 int (*xRename)(sqlite3_vtab *pVtab, const char *zNew) ; 
 int (*xSavepoint)(sqlite3_vtab *pVTab, int) ; 
 int (*xRelease)(sqlite3_vtab *pVTab, int) ; 
 int (*xRollbackTo)(sqlite3_vtab *pVTab, int) ; 
 } ;
struct sqlite3_index_info { 
 int nConstraint ; 
 struct sqlite3_index_constraint { int iColumn ; 
 unsigned char op ; 
 unsigned char usable ; 
 int iTermOffset ; 
 } *aConstraint ; 
 int nOrderBy ; 
 struct sqlite3_index_orderby { int iColumn ; 
 unsigned char desc ; 
 } *aOrderBy ; 
 struct sqlite3_index_constraint_usage { int argvIndex ; 
 unsigned char omit ; 
 } *aConstraintUsage ; 
 int idxNum ; 
 char *idxStr ; 
 int needToFreeIdxStr ; 
 int orderByConsumed ; 
 double estimatedCost ; 
 sqlite3_int64 estimatedRows ; 
 int idxFlags ; 
 sqlite3_uint64 colUsed ; 
 } ;
struct sqlite3_vtab { 
 const sqlite3_module *pModule ; 
 int nRef ; 
 char *zErrMsg ; 
 } ;
struct sqlite3_vtab_cursor { 
 sqlite3_vtab *pVtab ; 
 } ;
typedef struct sqlite3_blob sqlite3_blob ;
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods ;
struct sqlite3_mutex_methods { 
 int (*xMutexInit)(void) ; 
 int (*xMutexEnd)(void) ; 
 sqlite3_mutex *(*xMutexAlloc)(int) ; 
 void (*xMutexFree)(sqlite3_mutex *) ; 
 void (*xMutexEnter)(sqlite3_mutex *) ; 
 int (*xMutexTry)(sqlite3_mutex *) ; 
 void (*xMutexLeave)(sqlite3_mutex *) ; 
 int (*xMutexHeld)(sqlite3_mutex *) ; 
 int (*xMutexNotheld)(sqlite3_mutex *) ; 
 } ;
typedef struct sqlite3_pcache sqlite3_pcache ;
typedef struct sqlite3_pcache_page sqlite3_pcache_page ;
struct sqlite3_pcache_page { 
 void *pBuf ; 
 void *pExtra ; 
 } ;
typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2 ;
struct sqlite3_pcache_methods2 { 
 int iVersion ; 
 void *pArg ; 
 int (*xInit)(void*) ; 
 void (*xShutdown)(void*) ; 
 sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable) ; 
 void (*xCachesize)(sqlite3_pcache*, int nCachesize) ; 
 int (*xPagecount)(sqlite3_pcache*) ; 
 sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag) ; 
 void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard) ; 
 void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, unsigned oldKey, unsigned newKey) ; 
 void (*xTruncate)(sqlite3_pcache*, unsigned iLimit) ; 
 void (*xDestroy)(sqlite3_pcache*) ; 
 void (*xShrink)(sqlite3_pcache*) ; 
 } ;
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods ;
struct sqlite3_pcache_methods { 
 void *pArg ; 
 int (*xInit)(void*) ; 
 void (*xShutdown)(void*) ; 
 sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable) ; 
 void (*xCachesize)(sqlite3_pcache*, int nCachesize) ; 
 int (*xPagecount)(sqlite3_pcache*) ; 
 void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag) ; 
 void (*xUnpin)(sqlite3_pcache*, void*, int discard) ; 
 void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey) ; 
 void (*xTruncate)(sqlite3_pcache*, unsigned iLimit) ; 
 void (*xDestroy)(sqlite3_pcache*) ; 
 } ;
typedef struct sqlite3_backup sqlite3_backup ;
typedef struct sqlite3_snapshot { 
 unsigned char hidden[48] ; 
 } sqlite3_snapshot ;
typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry ;
typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info ;
struct sqlite3_rtree_geometry { 
 void *pContext ; 
 int nParam ; 
 sqlite3_rtree_dbl *aParam ; 
 void *pUser ; 
 void (*xDelUser)(void *) ; 
 } ;
struct sqlite3_rtree_query_info { 
 void *pContext ; 
 int nParam ; 
 sqlite3_rtree_dbl *aParam ; 
 void *pUser ; 
 void (*xDelUser)(void*) ; 
 sqlite3_rtree_dbl *aCoord ; 
 unsigned int *anQueue ; 
 int nCoord ; 
 int iLevel ; 
 int mxLevel ; 
 sqlite3_int64 iRowid ; 
 sqlite3_rtree_dbl rParentScore ; 
 int eParentWithin ; 
 int eWithin ; 
 sqlite3_rtree_dbl rScore ; 
 sqlite3_value **apSqlParam ; 
 } ;
typedef struct sqlite3_session sqlite3_session ;
typedef struct sqlite3_changeset_iter sqlite3_changeset_iter ;
typedef struct sqlite3_changegroup sqlite3_changegroup ;
typedef struct Fts5ExtensionApi Fts5ExtensionApi ;
typedef struct Fts5Context Fts5Context ;
typedef struct Fts5PhraseIter Fts5PhraseIter ;
struct Fts5PhraseIter { 
 const unsigned char *a ; 
 const unsigned char *b ; 
 } ;
struct Fts5ExtensionApi { 
 int iVersion ; 
 void *(*xUserData)(Fts5Context*) ; 
 int (*xColumnCount)(Fts5Context*) ; 
 int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow) ; 
 int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken) ; 
 int (*xTokenize)(Fts5Context*, const char *pText, int nText, void *pCtx, int (*xToken)(void*, int, const char*, int, int, int) ) ; 
 int (*xPhraseCount)(Fts5Context*) ; 
 int (*xPhraseSize)(Fts5Context*, int iPhrase) ; 
 int (*xInstCount)(Fts5Context*, int *pnInst) ; 
 int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff) ; 
 sqlite3_int64 (*xRowid)(Fts5Context*) ; 
 int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn) ; 
 int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken) ; 
 int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData, int(*)(const Fts5ExtensionApi*,Fts5Context*,void*) ) ; 
 int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*)) ; 
 void *(*xGetAuxdata)(Fts5Context*, int bClear) ; 
 int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*) ; 
 void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff) ; 
 int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*) ; 
 void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol) ; 
 } ;
typedef struct Fts5Tokenizer Fts5Tokenizer ;
typedef struct fts5_tokenizer fts5_tokenizer ;
struct fts5_tokenizer { 
 int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut) ; 
 void (*xDelete)(Fts5Tokenizer*) ; 
 int (*xTokenize)(Fts5Tokenizer*, void *pCtx, int flags, const char *pText, int nText, int (*xToken)( void *pCtx, int tflags, const char *pToken, int nToken, int iStart, int iEnd ) ) ; 
 } ;
typedef struct fts5_api fts5_api ;
struct fts5_api { 
 int iVersion ; 
 int (*xCreateTokenizer)( fts5_api *pApi, const char *zName, void *pContext, fts5_tokenizer *pTokenizer, void (*xDestroy)(void*) ) ; 
 int (*xFindTokenizer)( fts5_api *pApi, const char *zName, void **ppContext, fts5_tokenizer *pTokenizer ) ; 
 int (*xCreateFunction)( fts5_api *pApi, const char *zName, void *pContext, fts5_extension_function xFunction, void (*xDestroy)(void*) ) ; 
 } ;
struct sqlite3_api_routines { 
 void * (*aggregate_context)(sqlite3_context*,int nBytes) ; 
 int (*aggregate_count)(sqlite3_context*) ; 
 int (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*)) ; 
 int (*bind_double)(sqlite3_stmt*,int,double) ; 
 int (*bind_int)(sqlite3_stmt*,int,int) ; 
 int (*bind_int64)(sqlite3_stmt*,int,sqlite_int64) ; 
 int (*bind_null)(sqlite3_stmt*,int) ; 
 int (*bind_parameter_count)(sqlite3_stmt*) ; 
 int (*bind_parameter_index)(sqlite3_stmt*,const char*zName) ; 
 const char * (*bind_parameter_name)(sqlite3_stmt*,int) ; 
 int (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*)) ; 
 int (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*)) ; 
 int (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*) ; 
 int (*busy_handler)(sqlite3*,int(*)(void*,int),void*) ; 
 int (*busy_timeout)(sqlite3*,int ms) ; 
 int (*changes)(sqlite3*) ; 
 int (*close)(sqlite3*) ; 
 int (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*, int eTextRep,const char*)) ; 
 int (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*, int eTextRep,const void*)) ; 
 const void * (*column_blob)(sqlite3_stmt*,int iCol) ; 
 int (*column_bytes)(sqlite3_stmt*,int iCol) ; 
 int (*column_bytes16)(sqlite3_stmt*,int iCol) ; 
 int (*column_count)(sqlite3_stmt*pStmt) ; 
 const char * (*column_database_name)(sqlite3_stmt*,int) ; 
 const void * (*column_database_name16)(sqlite3_stmt*,int) ; 
 const char * (*column_decltype)(sqlite3_stmt*,int i) ; 
 const void * (*column_decltype16)(sqlite3_stmt*,int) ; 
 double (*column_double)(sqlite3_stmt*,int iCol) ; 
 int (*column_int)(sqlite3_stmt*,int iCol) ; 
 sqlite_int64 (*column_int64)(sqlite3_stmt*,int iCol) ; 
 const char * (*column_name)(sqlite3_stmt*,int) ; 
 const void * (*column_name16)(sqlite3_stmt*,int) ; 
 const char * (*column_origin_name)(sqlite3_stmt*,int) ; 
 const void * (*column_origin_name16)(sqlite3_stmt*,int) ; 
 const char * (*column_table_name)(sqlite3_stmt*,int) ; 
 const void * (*column_table_name16)(sqlite3_stmt*,int) ; 
 const unsigned char * (*column_text)(sqlite3_stmt*,int iCol) ; 
 const void * (*column_text16)(sqlite3_stmt*,int iCol) ; 
 int (*column_type)(sqlite3_stmt*,int iCol) ; 
 sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol) ; 
 void * (*commit_hook)(sqlite3*,int(*)(void*),void*) ; 
 int (*complete)(const char*sql) ; 
 int (*complete16)(const void*sql) ; 
 int (*create_collation)(sqlite3*,const char*,int,void*, int(*)(void*,int,const void*,int,const void*)) ; 
 int (*create_collation16)(sqlite3*,const void*,int,void*, int(*)(void*,int,const void*,int,const void*)) ; 
 int (*create_function)(sqlite3*,const char*,int,int,void*, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*)) ; 
 int (*create_function16)(sqlite3*,const void*,int,int,void*, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*)) ; 
 int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*) ; 
 int (*data_count)(sqlite3_stmt*pStmt) ; 
 sqlite3 * (*db_handle)(sqlite3_stmt*) ; 
 int (*declare_vtab)(sqlite3*,const char*) ; 
 int (*enable_shared_cache)(int) ; 
 int (*errcode)(sqlite3*db) ; 
 const char * (*errmsg)(sqlite3*) ; 
 const void * (*errmsg16)(sqlite3*) ; 
 int (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**) ; 
 int (*expired)(sqlite3_stmt*) ; 
 int (*finalize)(sqlite3_stmt*pStmt) ; 
 void (*free)(void*) ; 
 void (*free_table)(char**result) ; 
 int (*get_autocommit)(sqlite3*) ; 
 void * (*get_auxdata)(sqlite3_context*,int) ; 
 int (*get_table)(sqlite3*,const char*,char***,int*,int*,char**) ; 
 int (*global_recover)(void) ; 
 void (*interruptx)(sqlite3*) ; 
 sqlite_int64 (*last_insert_rowid)(sqlite3*) ; 
 const char * (*libversion)(void) ; 
 int (*libversion_number)(void) ; 
 void *(*malloc)(int) ; 
 char * (*mprintf)(const char*,...) ; 
 int (*open)(const char*,sqlite3**) ; 
 int (*open16)(const void*,sqlite3**) ; 
 int (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**) ; 
 int (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**) ; 
 void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*) ; 
 void (*progress_handler)(sqlite3*,int,int(*)(void*),void*) ; 
 void *(*realloc)(void*,int) ; 
 int (*reset)(sqlite3_stmt*pStmt) ; 
 void (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*)) ; 
 void (*result_double)(sqlite3_context*,double) ; 
 void (*result_error)(sqlite3_context*,const char*,int) ; 
 void (*result_error16)(sqlite3_context*,const void*,int) ; 
 void (*result_int)(sqlite3_context*,int) ; 
 void (*result_int64)(sqlite3_context*,sqlite_int64) ; 
 void (*result_null)(sqlite3_context*) ; 
 void (*result_text)(sqlite3_context*,const char*,int,void(*)(void*)) ; 
 void (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*)) ; 
 void (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*)) ; 
 void (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*)) ; 
 void (*result_value)(sqlite3_context*,sqlite3_value*) ; 
 void * (*rollback_hook)(sqlite3*,void(*)(void*),void*) ; 
 int (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*, const char*,const char*),void*) ; 
 void (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*)) ; 
 char * (*snprintf)(int,char*,const char*,...) ; 
 int (*step)(sqlite3_stmt*) ; 
 int (*table_column_metadata)(sqlite3*,const char*,const char*,const char*, char const**,char const**,int*,int*,int*) ; 
 void (*thread_cleanup)(void) ; 
 int (*total_changes)(sqlite3*) ; 
 void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*) ; 
 int (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*) ; 
 void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*, sqlite_int64),void*) ; 
 void * (*user_data)(sqlite3_context*) ; 
 const void * (*value_blob)(sqlite3_value*) ; 
 int (*value_bytes)(sqlite3_value*) ; 
 int (*value_bytes16)(sqlite3_value*) ; 
 double (*value_double)(sqlite3_value*) ; 
 int (*value_int)(sqlite3_value*) ; 
 sqlite_int64 (*value_int64)(sqlite3_value*) ; 
 int (*value_numeric_type)(sqlite3_value*) ; 
 const unsigned char * (*value_text)(sqlite3_value*) ; 
 const void * (*value_text16)(sqlite3_value*) ; 
 const void * (*value_text16be)(sqlite3_value*) ; 
 const void * (*value_text16le)(sqlite3_value*) ; 
 int (*value_type)(sqlite3_value*) ; 
 char *(*vmprintf)(const char*,va_list) ; 
 int (*overload_function)(sqlite3*, const char *zFuncName, int nArg) ; 
 int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**) ; 
 int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**) ; 
 int (*clear_bindings)(sqlite3_stmt*) ; 
 int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*, void (*xDestroy)(void *)) ; 
 int (*bind_zeroblob)(sqlite3_stmt*,int,int) ; 
 int (*blob_bytes)(sqlite3_blob*) ; 
 int (*blob_close)(sqlite3_blob*) ; 
 int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64, int,sqlite3_blob**) ; 
 int (*blob_read)(sqlite3_blob*,void*,int,int) ; 
 int (*blob_write)(sqlite3_blob*,const void*,int,int) ; 
 int (*create_collation_v2)(sqlite3*,const char*,int,void*, int(*)(void*,int,const void*,int,const void*), void(*)(void*)) ; 
 int (*file_control)(sqlite3*,const char*,int,void*) ; 
 sqlite3_int64 (*memory_highwater)(int) ; 
 sqlite3_int64 (*memory_used)(void) ; 
 sqlite3_mutex *(*mutex_alloc)(int) ; 
 void (*mutex_enter)(sqlite3_mutex*) ; 
 void (*mutex_free)(sqlite3_mutex*) ; 
 void (*mutex_leave)(sqlite3_mutex*) ; 
 int (*mutex_try)(sqlite3_mutex*) ; 
 int (*open_v2)(const char*,sqlite3**,int,const char*) ; 
 int (*release_memory)(int) ; 
 void (*result_error_nomem)(sqlite3_context*) ; 
 void (*result_error_toobig)(sqlite3_context*) ; 
 int (*sleep)(int) ; 
 void (*soft_heap_limit)(int) ; 
 sqlite3_vfs *(*vfs_find)(const char*) ; 
 int (*vfs_register)(sqlite3_vfs*,int) ; 
 int (*vfs_unregister)(sqlite3_vfs*) ; 
 int (*xthreadsafe)(void) ; 
 void (*result_zeroblob)(sqlite3_context*,int) ; 
 void (*result_error_code)(sqlite3_context*,int) ; 
 int (*test_control)(int, ...) ; 
 void (*randomness)(int,void*) ; 
 sqlite3 *(*context_db_handle)(sqlite3_context*) ; 
 int (*extended_result_codes)(sqlite3*,int) ; 
 int (*limit)(sqlite3*,int,int) ; 
 sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*) ; 
 const char *(*sql)(sqlite3_stmt*) ; 
 int (*status)(int,int*,int*,int) ; 
 int (*backup_finish)(sqlite3_backup*) ; 
 sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*) ; 
 int (*backup_pagecount)(sqlite3_backup*) ; 
 int (*backup_remaining)(sqlite3_backup*) ; 
 int (*backup_step)(sqlite3_backup*,int) ; 
 const char *(*compileoption_get)(int) ; 
 int (*compileoption_used)(const char*) ; 
 int (*create_function_v2)(sqlite3*,const char*,int,int,void*, void (*xFunc)(sqlite3_context*,int,sqlite3_value**), void (*xStep)(sqlite3_context*,int,sqlite3_value**), void (*xFinal)(sqlite3_context*), void(*xDestroy)(void*)) ; 
 int (*db_config)(sqlite3*,int,...) ; 
 sqlite3_mutex *(*db_mutex)(sqlite3*) ; 
 int (*db_status)(sqlite3*,int,int*,int*,int) ; 
 int (*extended_errcode)(sqlite3*) ; 
 void (*log)(int,const char*,...) ; 
 sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64) ; 
 const char *(*sourceid)(void) ; 
 int (*stmt_status)(sqlite3_stmt*,int,int) ; 
 int (*strnicmp)(const char*,const char*,int) ; 
 int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*) ; 
 int (*wal_autocheckpoint)(sqlite3*,int) ; 
 int (*wal_checkpoint)(sqlite3*,const char*) ; 
 void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*) ; 
 int (*blob_reopen)(sqlite3_blob*,sqlite3_int64) ; 
 int (*vtab_config)(sqlite3*,int op,...) ; 
 int (*vtab_on_conflict)(sqlite3*) ; 
 int (*close_v2)(sqlite3*) ; 
 const char *(*db_filename)(sqlite3*,const char*) ; 
 int (*db_readonly)(sqlite3*,const char*) ; 
 int (*db_release_memory)(sqlite3*) ; 
 const char *(*errstr)(int) ; 
 int (*stmt_busy)(sqlite3_stmt*) ; 
 int (*stmt_readonly)(sqlite3_stmt*) ; 
 int (*stricmp)(const char*,const char*) ; 
 int (*uri_boolean)(const char*,const char*,int) ; 
 sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64) ; 
 const char *(*uri_parameter)(const char*,const char*) ; 
 char *(*vsnprintf)(int,char*,const char*,va_list) ; 
 int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*) ; 
 int (*auto_extension)(void(*)(void)) ; 
 int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64, void(*)(void*)) ; 
 int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64, void(*)(void*),unsigned char) ; 
 int (*cancel_auto_extension)(void(*)(void)) ; 
 int (*load_extension)(sqlite3*,const char*,const char*,char**) ; 
 void *(*malloc64)(sqlite3_uint64) ; 
 sqlite3_uint64 (*msize)(void*) ; 
 void *(*realloc64)(void*,sqlite3_uint64) ; 
 void (*reset_auto_extension)(void) ; 
 void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64, void(*)(void*)) ; 
 void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64, void(*)(void*), unsigned char) ; 
 int (*strglob)(const char*,const char*) ; 
 sqlite3_value *(*value_dup)(const sqlite3_value*) ; 
 void (*value_free)(sqlite3_value*) ; 
 int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64) ; 
 int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64) ; 
 unsigned int (*value_subtype)(sqlite3_value*) ; 
 void (*result_subtype)(sqlite3_context*,unsigned int) ; 
 int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int) ; 
 int (*strlike)(const char*,const char*,unsigned int) ; 
 int (*db_cacheflush)(sqlite3*) ; 
 int (*system_errno)(sqlite3*) ; 
 int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*) ; 
 char *(*expanded_sql)(sqlite3_stmt*) ; 
 void (*set_last_insert_rowid)(sqlite3*,sqlite3_int64) ; 
 } ;
